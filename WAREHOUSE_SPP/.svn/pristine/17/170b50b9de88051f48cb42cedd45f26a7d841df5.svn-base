using DSofT.Warehouse.Business;
using DSofT.Warehouse.Log.UtilHelper;
using DSofT.Warehouse.Resources;
using DSofT.Framework.UIControl;
using DSofT.Framework.UICore;
using System;
using System.Collections.Generic;
using System.Data;
using System.Linq;
using System.Windows;
using System.Windows.Data;
using System.Windows.Input;
using System.Windows.Forms;
using System.Windows.Media.Imaging;

namespace DSofT.Warehouse.UI
{
    /// <summary>
    ///  Author:	 Ngô Gia Thiên
    ///  Create date: 05/03/2018
    ///  Editor:      
    ///  Modify date: 
    ///  Description: Danh muc san pham popup
    /// </summary>
    
    public partial class frm_DanhMuc_SanPham_Popup : PopupBase
    {
        DataTable iDataSource = null;
        DataRow iRowSelGb = null;
        IDM_SanPhamBussiness sp;
        public frm_DanhMuc_SanPham_Popup()
        {
            InitializeComponent();
            sp = new SanPhamBussiness(string.Empty);
            this.iDataSource = this.TableSchemaDefineBingding();
            this.DataContext = this.iDataSource;
            LoadCbo();
        }
        public override void OnPopupShown()
        {
            try
            {
                if (this.Parameter != null && this.Parameter.Count() > 0)
                {
                    iRowSelGb = this.Parameter[0] as DataRow;
                    DispalayRequest();
                    CheckCbo_And_Ckb();
                }
            }
            catch (Exception ex)
            {
                base.ShowMessage(MessageType.Error, ex.Message, ex);
            }
        }

        public void DispalayRequest()
        {
            try
            {
                foreach (DataColumn item in this.iRowSelGb.Table.Columns)
                {
                    if (this.iDataSource.Columns[item.ColumnName] != null)
                    {
                        this.iDataSource.Rows[0][item.ColumnName] = iRowSelGb[item.ColumnName];
                    }
                }
            }
            catch (Exception ex)
            {
                UtilLog.WriteLogToDB(LogGroupName.PROGRAM, ex.Message, this.GetType().Name, "DispalayRequest()");
                base.ShowMessage(MessageType.Error, ex.Message, ex);
            }
        }
        private void CheckCbo_And_Ckb()
        {
            if(iRowSelGb!=null && iRowSelGb.ItemArray.Count()>0)
            {
                if (iRowSelGb["TINH_TRANG"].ToString() == "True")
                {
                    iDataSource.Rows[0]["TINH_TRANG"] = 1;
                    rbtDangSuDung.IsChecked = true;
                }
                else
                {
                    iDataSource.Rows[0]["TINH_TRANG"] = 0;
                    rbtKhongSuDung.IsChecked = true;
                }

                if(iRowSelGb["IS_KSDB"].ToString()=="True")
                    iDataSource.Rows[0]["IS_KSDB"] = 1;
                else
                    iDataSource.Rows[0]["IS_KSDB"] = 0;

                if (iRowSelGb["IS_QA"].ToString() == "True")
                    iDataSource.Rows[0]["IS_QA"] = 1;
                else
                    iDataSource.Rows[0]["IS_QA"] = 0;
                try
                {
                    if (iDataSource.Rows[0]["PATH_IMAGE"] != null)
                        imgHinh.Source = new BitmapImage(new Uri(iRowSelGb["PATH_IMAGE"].ToString()));
                }
                catch { }
            }
        }
        private void LoadCbo()
        {
            DataTable dt = new DataTable();
            try
            {
                dt = sp.GetData_For_Cbo_DKBQ();
                ComboBoxUtil.SetComboBoxEdit(cboDKBQ, "TEN_DKIEN_BQUAN", "DKIEN_BQUAN_ID", dt, SelectionTypeEnum.Native);

                dt = sp.GetData_For_Cbo_Item_Type();
                ComboBoxUtil.SetComboBoxEdit(cboItemType, "TEN_ITEM_TYPE", "MA_ITEM_TYPE", dt, SelectionTypeEnum.Native);
                
                dt = sp.GetData_For_Cbo_Loai_SPham();
                ComboBoxUtil.SetComboBoxEdit(cboLoaiSanPham, "TEN_LOAI_SPHAM", "LOAI_SPHAM_ID", dt, SelectionTypeEnum.Native);

                dt = sp.GetData_For_Cbo_Nguon_Nhap();
                ComboBoxUtil.SetComboBoxEdit(cboNguonNhap, "TEN_NGUON_NHAP", "NGUON_NHAP_ID", dt, SelectionTypeEnum.Native);

                dt = sp.GetData_For_Cbo_Nhom_SPham();
                ComboBoxUtil.SetComboBoxEdit(cboNhomSanPham, "TEN_NHOM_SPHAM", "NHOM_SPHAM_ID", dt, SelectionTypeEnum.Native);

                dt = sp.GetData_For_Cbo_NSX();
                ComboBoxUtil.SetComboBoxEdit(cboNSX, "TEN_NHA_SXUAT", "NHA_SXUAT_ID", dt, SelectionTypeEnum.Native);

                dt = sp.GetData_For_Cbo_QuocGia();
                ComboBoxUtil.SetComboBoxEdit(cboNuocSX, "TEN_QUOCGIA", "QUOCGIA_ID", dt, SelectionTypeEnum.Native);

                dt = sp.GetData_For_Cbo_LoaiKichThuoc();
                ComboBoxUtil.SetComboBoxEdit(cboLoaiKichThuoc, "MA_SIZE", "LOAI_KTHUOC_ID", dt, SelectionTypeEnum.Native);

                dt = sp.GetData_For_Cbo_KhachHang_Ncc();
                ComboBoxUtil.SetComboBoxEdit(cboNhaCC, "TEN_KH", "KHACHHANG_NCC_ID", dt, SelectionTypeEnum.Native);

                dt = sp.GetData_For_Cbo_DVT();
                ComboBoxUtil.SetComboBoxEdit(cboDVT, "TEN_DONVI_TINH", "MA_DONVI_TINH", dt, SelectionTypeEnum.Native);
                ComboBoxUtil.SetComboBoxEdit(cboDVTDongGoi, "TEN_DONVI_TINH", "MA_DONVI_TINH", dt, SelectionTypeEnum.Native);

                

            }
            catch
            {
                base.ShowMessage(MessageType.Error, "Có lỗi trong quá trình sử lý thông tin!");
                return;
            }
        }

        private int CheckEmpty()
        {
            if(cboItemType.EditValue==null)
            {
                base.ShowMessage(MessageType.Information, "Vui lòng chọn Item Type!");
                cboItemType.Focus();
                return 1;
            }
            if(txtMaSanPham.Text==string.Empty)
            {
                base.ShowMessage(MessageType.Information, "Vui lòng nhập mã sản phẩm!");
                txtMaSanPham.Focus();
                return 1;
            }
            if(txtTenSanPham.Text==string.Empty)
            {
                base.ShowMessage(MessageType.Information, "Vui lòng nhập tên sản phẩm!");
                txtTenSanPham.Focus();
                return 1;
            }
            if(cboDVT.EditValue==null)
            {
                base.ShowMessage(MessageType.Information, "Vui lòng chọn đơn vị tính!");
                cboDVT.Focus();
                return 1;
            }
            if(cboNhomSanPham.EditValue==null)
            {
                base.ShowMessage(MessageType.Information, "Vui lòng chọn nhóm sản phẩm!");
                cboNhomSanPham.Focus();
                return 1;
            }
            if(cboLoaiSanPham.EditValue==null)
            {
                base.ShowMessage(MessageType.Information, "Vui lòng chọn loại sản phẩm!");
                cboLoaiSanPham.Focus();
                return 1;
            }
            if(rbtDangSuDung.IsChecked==false && rbtKhongSuDung.IsChecked==false)
            {
                base.ShowMessage(MessageType.Information, "Vui lòng chọn tình trạng sử dụng!");
                return 1;
            }
            return 0;
        }
        private void checkTinhTrang()
        {
            if (rbtDangSuDung.IsChecked == true)
                this.iDataSource.Rows[0]["TINH_TRANG"] = 1;
            else
                this.iDataSource.Rows[0]["TINH_TRANG"] = 0;
        }

        private int CheckSpecialChar_For_Ma(string str)
        {
            if (str == "")
            {
                return 0;
            }
            char[] varChar = str.ToCharArray();
            int i = 0;
            while (i < varChar.Length &&
                ((Convert.ToInt32(varChar[i]) >= 97 && Convert.ToInt32(varChar[i]) <= 122) || (Convert.ToInt32(varChar[i]) >= 65 && Convert.ToInt32(varChar[i]) <= 90)
                || (Convert.ToInt32(varChar[i]) >= 48 && Convert.ToInt32(varChar[i]) <= 57)))
            {
                i++;
            }
            if (i < varChar.Length)
            {
                return 0;
            }
            return 1;
        }
        /// <summary>
        /// dong popup
        /// </summary>
        /// <param name="sender"></param>
        /// <param name="e"></param>

        private DataTable TableSchemaDefineBingding()
        {
            DataTable xDt = null;
            try
            {
                Dictionary<string, Type> xDicUser = new Dictionary<string, Type>();
                xDicUser.Add("SANPHAM_ID", typeof(decimal));
                xDicUser.Add("MA_DVIQLY", typeof(string));
                xDicUser.Add("TEN_ITEM_TYPE", typeof(string));
                xDicUser.Add("MA_ITEM_TYPE", typeof(string));
                xDicUser.Add("MA_SANPHAM_KH", typeof(string));
                xDicUser.Add("MA_SANPHAM", typeof(string));
                xDicUser.Add("TEN_SANPHAM", typeof(string));
                xDicUser.Add("NHOM_SPHAM_ID", typeof(decimal));
                xDicUser.Add("TEN_NHOM_SPHAM", typeof(string));
                xDicUser.Add("LOAI_SPHAM_ID", typeof(decimal));
                xDicUser.Add("TEN_LOAI_SPHAM", typeof(string));
                xDicUser.Add("MA_VACH", typeof(string));
                xDicUser.Add("IS_KSDB", typeof(bool));
                xDicUser.Add("IS_QA", typeof(bool));
                xDicUser.Add("HOATCHAT_CHINH", typeof(string));
                xDicUser.Add("MA_DONVI_TINH", typeof(string));
                xDicUser.Add("TEN_DONVI_TINH", typeof(string));
                xDicUser.Add("TON_TOITHIEU", typeof(int));
                xDicUser.Add("SONGAY_CANHBAOTRUOC", typeof(int));
                xDicUser.Add("NGUON_NHAP_ID", typeof(decimal));
                xDicUser.Add("TEN_NGUON_NHAP", typeof(string));
                xDicUser.Add("DKIEN_BQUAN_ID", typeof(decimal));
                xDicUser.Add("TEN_DKIEN_BQUAN", typeof(string));
                xDicUser.Add("GIABAN_LE", typeof(decimal));
                xDicUser.Add("GIABAN_BUON", typeof(decimal));
                xDicUser.Add("VITRI_DEXUAT", typeof(string));
                xDicUser.Add("NHA_SXUAT_ID", typeof(decimal));
                xDicUser.Add("TEN_NHA_SXUAT", typeof(string));
                xDicUser.Add("QUOCGIA_ID", typeof(decimal));
                xDicUser.Add("TEN_QUOCGIA", typeof(string));
                xDicUser.Add("KHACHHANG_NCC_ID", typeof(decimal));
                xDicUser.Add("TEN_KH", typeof(string));
                xDicUser.Add("THUE_VAT", typeof(decimal));
                xDicUser.Add("CHIET_KHAU", typeof(decimal));
                xDicUser.Add("THUONG_DS", typeof(decimal));
                xDicUser.Add("PATH_IMAGE", typeof(string));
                xDicUser.Add("SOLUONG_THUNG", typeof(int));
                xDicUser.Add("MA_DONVI_TINH_THUNG", typeof(string));
                xDicUser.Add("TEN_DONVI_TINH_THUNG", typeof(string));
                xDicUser.Add("TRONG_LUONG_KG", typeof(decimal));
                xDicUser.Add("LOAI_KTHUOC_ID", typeof(decimal));
                xDicUser.Add("MA_SIZE", typeof(string));
                xDicUser.Add("THE_TICH_M3", typeof(decimal));
                xDicUser.Add("SOLUONG_THUNG_PALLET", typeof(int));
                xDicUser.Add("SO_DANGKY", typeof(string));
                xDicUser.Add("NGAYKY_DANGKY", typeof(string));
                xDicUser.Add("NGAYHH_DANGKY", typeof(string));
                xDicUser.Add("SO_XACNHAN", typeof(string));
                xDicUser.Add("NGAYKY_XACNHAN", typeof(string));
                xDicUser.Add("NGAYHH_XACNHAN", typeof(string));
                xDicUser.Add("GHI_CHU", typeof(string));
                xDicUser.Add("TINH_TRANG", typeof(bool));
                xDt = TableUtil.ConvertDictionaryToTable(xDicUser, true, false);
            }
            catch (Exception ex)
            {
                UtilLog.WriteLogToDB(LogGroupName.PROGRAM, ex.Message, this.GetType().Name, "TableSchemaDefineBingding()");
                base.ShowMessage(MessageType.Error, ex.Message, ex);
            }
            return xDt;
        }
        private void btnClose_Click(object sender, RoutedEventArgs e)
        {
            this.Close();
        }
        /// <summary>
        /// goi khai bao GPNK
        /// </summary>
        /// <param name="sender"></param>
        /// <param name="e"></param>
        private void btnGPNK_Click(object sender, RoutedEventArgs e)
        {
            try
            {
                object xReturn = UIAgent.GetUIPopupDialog(this, null, this.GetType().ToString(), "DSofT.Warehouse.UI", "frm_DanhMucSanPham_KhaiBaoGPNK", null);
            }
            catch (Exception ex)
            {
                UtilLog.WriteLogToDB(LogGroupName.PROGRAM, ex.Message, this.GetType().Name, this.btnGPNK.Tag.ToString());
                base.ShowMessage(MessageType.Error, ex.Message, ex);
            }
        }
        /// <summary>
        /// add hinh anh
        /// </summary>
        /// <param name="sender"></param>
        /// <param name="e"></param>
        /*private void btnAnh_Click(object sender, RoutedEventArgs e)
        {
            OpenFileDialog open = new OpenFileDialog();
            open.Filter = open.Filter = "JPG files (*.jpg)|*.jpg|All file (*.*)|*.*";
            open.FilterIndex = 1;
            open.RestoreDirectory = true;
            if (open.ShowDialog() == DialogResult.OK)
            {
                txtAnh.Text = open.FileName;
                imgAnh.Source = new BitmapImage(new Uri(txtAnh.Text));
            }
        }*/

        /// <summary>
        /// khai bao quy cach san pham
        /// </summary>
        /// <param name="sender"></param>
        /// <param name="e"></param>
        private void btnQCSP_Click(object sender, RoutedEventArgs e)
        {
            try
            {
                object xReturn = UIAgent.GetUIPopupDialog(this, null, this.GetType().ToString(), "DSofT.Warehouse.UI", "frm_DanhMucSanPham_Popup1", null);
            }
            catch (Exception ex)
            {
                UtilLog.WriteLogToDB(LogGroupName.PROGRAM, ex.Message, this.GetType().Name, this.btnQCSP.Tag.ToString());
                base.ShowMessage(MessageType.Error, ex.Message, ex);
            }
        }
        private void setCkb()
        {
            if (ckbKSDB.IsChecked == true)
                this.iDataSource.Rows[0]["IS_KSDB"] = 1;
            else
                this.iDataSource.Rows[0]["IS_KSDB"] = 0;
            if (ckbQA.IsChecked == true)
                this.iDataSource.Rows[0]["IS_QA"] = 1;
            else
                this.iDataSource.Rows[0]["IS_QA"] = 0;
        }

        private int CheckDateMonth()
        {
            if (dtpNgayDK.Text != string.Empty && dtpNgayHHDK.Text != string.Empty)
            {
                DateTime ngayDK2 = (DateTime)dtpNgayDK.EditValue;
                DateTime ngayHHDK2 = (DateTime)dtpNgayHHDK.EditValue;
                if (DateTime.Compare(ngayHHDK2, ngayDK2) > 0)
                {
                    base.ShowMessage(MessageType.Information, "Ngày hết hạn đăng ký phải sau ngày đăng ký! ");
                    return 0;
                }
            }
            if(dtpNgayDKXN.Text!=string.Empty && dtpNgayHHXN.Text!=string.Empty)
            {
                DateTime ngayXNDK = (DateTime)dtpNgayDKXN.EditValue;
                DateTime ngayHHXN = (DateTime)dtpNgayHHXN.EditValue;
                if(DateTime.Compare(ngayHHXN,ngayXNDK)>0)
                {
                    base.ShowMessage(MessageType.Information, "Ngày hết hạn đăng ký xác nhận phải sau ngày hết hạn xác nhận! ");
                    return 0;
                }
            }
            return 1;
        }
        private void btnSave_Click(object sender, RoutedEventArgs e)
        {
            int result = 0;
            try
            {
                if (CheckEmpty() == 1)
                    return;
                if (CheckDateMonth() == 0)
                    return;
                checkTinhTrang();
                setCkb();
                iDataSource.Rows[0]["PATH_IMAGE"] = txtLinkHinh.Text;
                if (CheckSpecialChar_For_Ma(txtMaSanPham.Text)==0)
                {
                    base.ShowMessage(MessageType.Information, "Mã sản phẩm chỉ gồm chữ, số và không chứa khổng trống!");
                    txtMaSanPham.Focus();
                    return;
                }
                if(this.iRowSelGb!=null)
                {
                    int exist_Ma = sp.Check_Exist_Ma_SPham_Update(this.iDataSource.Rows[0]["MA_SANPHAM"].ToString(), int.Parse(this.iDataSource.Rows[0]["SANPHAM_ID"].ToString()));
                    if(exist_Ma>0)
                    {
                        base.ShowMessage(MessageType.Information, "Mã sản phẩm [" + txtMaSanPham.Text + "] đã tồn tại!");
                        txtMaSanPham.Focus();
                        return;
                    }
                    else
                    {
                        result = sp.InsertOrUpdateSanPham(this.iDataSource.Copy());
                        if (result>0)
                        {
                            ToastMessage.ShowToastMessage(Convert.ToString(UtilLanguage.ApplyLanguage()["lblMessage"]), Convert.ToString(UtilLanguage.ApplyLanguage()["lblMessageSuccess"]), notificationService);
                            this.Close();
                            return;
                        }
                        else
                        {
                            base.ShowMessage(MessageType.Information, Convert.ToString(UtilLanguage.ApplyLanguage()["lblMessageFailed"]));
                            return;
                        }
                    }
                }
                else
                {
                    int exist_Ma = sp.Check_Exist_Ma_SPham(this.iDataSource.Rows[0]["MA_SANPHAM"].ToString());
                    if(exist_Ma>0)
                    {
                        base.ShowMessage(MessageType.Information, "Mã sản phẩm [" + txtMaSanPham.Text + "] đã tồn tại!");
                        txtMaSanPham.Focus();
                        return;
                    }
                    else
                    {
                        result = sp.InsertOrUpdateSanPham(this.iDataSource.Copy());
                        if (result > 0)
                        {
                            ToastMessage.ShowToastMessage(Convert.ToString(UtilLanguage.ApplyLanguage()["lblMessage"]), Convert.ToString(UtilLanguage.ApplyLanguage()["lblMessageSuccess"]), notificationService);
                            imgHinh.Source = null;
                            return;
                        }
                        else
                        {
                            base.ShowMessage(MessageType.Information, Convert.ToString(UtilLanguage.ApplyLanguage()["lblMessageFailed"]));
                            return;
                        }
                    }
                }
            }catch(Exception ex)
            {
                UtilLog.WriteLogToDB(LogGroupName.PROGRAM, ex.Message, this.GetType().Name, this.btnSave.Tag.ToString());
                base.ShowMessage(MessageType.Error, ex.Message, ex);
            }
        }

        private void btnThemMoi_Click(object sender, RoutedEventArgs e)
        {
            this.iDataSource.Clear();
            rbtDangSuDung.IsChecked = false;
            rbtKhongSuDung.IsChecked = false;
            this.iDataSource = this.TableSchemaDefineBingding();
            this.DataContext = this.iDataSource;
            this.iRowSelGb = null;
            imgHinh.Source = null;
        }

        private void btnAnh_Click(object sender, RoutedEventArgs e)
        {
            OpenFileDialog open = new OpenFileDialog();
            open.Filter = "JPG files (*.jpg)|*.jpg|All file (*.*)|*.*";
            open.FilterIndex = 1;
            open.RestoreDirectory = true;
            try
            {
                if (open.ShowDialog() == DialogResult.OK)
                {
                    txtLinkHinh.Text = open.FileName;
                    imgHinh.Source = new BitmapImage(new Uri(txtLinkHinh.Text));
                }
            }
            catch
            {
                base.ShowMessage(MessageType.Information, "File được chọn phải là file ảnh!");
                txtLinkHinh.Clear();
                return;
            }
        }
    }
}
