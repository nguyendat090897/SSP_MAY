using DSofT.Framework.Internal.Data;
using DSofT.Framework.UIControl;
using System.Collections.Generic;
using System.Data;

namespace DSofT.Warehouse.Provider
{
    public interface IFoodProvider
    {
        DataTable GetAllFood(DataTable dtInput);
        bool InsertOrUpdateFood(DataTable dtInput, DataTable dtInputDetail);
        bool DeleteFood(DataTable dtInput);
        DataTable GetAllFoodDetail(string foodId);
        DataTable GetAllFoodByFoodTypeId(string foodTypesId);
    }
    public class FoodProvider : BaseSqlExecute, IFoodProvider
    {

        public FoodProvider(string appId, string userId)
            : base(DbCommon.WarehouseDbConnstr, appId, userId)
        {
        }
        /// <summary>
        /// Get danh sách món ăn
        /// </summary>
        /// <returns></returns>
        public DataTable GetAllFood(DataTable dtInput)
        {
            var sqlParams = new object[] {     dtInput.Rows[0]["FoodCode"]
                                             , dtInput.Rows[0]["FoodName"]
                                             };
            var result = base.ExecuteDataSet("Food_GetAll", sqlParams);
            if (result != null)
            {
                return result.Tables[0];
            }
            return null;
        }
        /// <summary>
        /// GetAllFoodByFoodTypeId
        /// </summary>
        /// <param name="foodTypesId"></param>
        /// <returns></returns>
        public DataTable GetAllFoodByFoodTypeId(string foodTypesId)
        {
            var sqlParams = new object[] {  foodTypesId };
            var result = base.ExecuteDataSet("Food_GetAllByFoodType", sqlParams);
            if (result != null)
            {
                return result.Tables[0];
            }
            return null;
        }
        /// <summary>
        /// InsertOrUpdateFood
        /// </summary>
        /// <param name="dtInput"></param>
        /// <param name="dtInputDetail"></param>
        /// <returns></returns>
        public bool InsertOrUpdateFood(DataTable dtInput, DataTable dtInputDetail)
        {
            using (var tran = new System.Transactions.TransactionScope(System.Transactions.TransactionScopeOption.Required,
                 new System.Transactions.TransactionOptions { IsolationLevel = System.Transactions.IsolationLevel.ReadUncommitted }))
            {
                //thuc hien update
                if (NumberHelper.ConvertStringToLong(dtInput.Rows[0]["Id"].ToString()) > 0)
                {
                    var sqlParams = new object[] { dtInput.Rows[0]["Id"]
                                             , dtInput.Rows[0]["FoodCode"]
                                             , dtInput.Rows[0]["FoodName"]
                                             , dtInput.Rows[0]["FoodTypeId"]
                                             , dtInput.Rows[0]["Remark"]
                                             , CommonDataHelper.UserName
                                             };
                    var result = base.ExecScalar("Food_Update", sqlParams);
                    if (NumberHelper.ConvertStringToLong(result.ToString()) < 0)
                    {
                        return false;
                    }
                    var sqlParamsDelete = new object[] { dtInput.Rows[0]["Id"] };
                    var resultDelete = base.ExecScalar("FoodDetail_Delete", sqlParamsDelete);
                    if (NumberHelper.ConvertStringToLong(resultDelete.ToString()) < 0)
                    {
                        return false;
                    }
                    foreach (System.Data.DataRow dr in dtInputDetail.Rows)
                    {
                        var sqlParamsDetail = new object[] {
                                               dtInput.Rows[0]["Id"]
                                             , dr["Id"]
                                             , CommonDataHelper.UserName
                                             };
                        var resultDetail = base.ExecScalar("FoodDetail_Insert", sqlParamsDetail);
                        if (NumberHelper.ConvertStringToLong(resultDetail.ToString()) < 0)
                        {
                            return false;
                        }
                    }
                }
                else
                {
                    var sqlParams = new object[] {
                                              dtInput.Rows[0]["FoodCode"]
                                             , dtInput.Rows[0]["FoodName"]
                                             , dtInput.Rows[0]["FoodTypeId"]
                                             , dtInput.Rows[0]["Remark"]
                                             , CommonDataHelper.UserName
                                             };
                    var result = base.ExecScalar("Food_Insert", sqlParams);
                    if (NumberHelper.ConvertStringToLong(result.ToString()) < 0)
                    {
                        return false;
                    }
                    foreach (System.Data.DataRow dr in dtInputDetail.Rows)
                    {
                        var sqlParamsDetail = new object[] {
                                               NumberHelper.ConvertStringToLong(result.ToString())
                                             , dr["Id"]
                                             , CommonDataHelper.UserName
                                             };
                        var resultDetail = base.ExecScalar("FoodDetail_Insert", sqlParamsDetail);
                        if (NumberHelper.ConvertStringToLong(resultDetail.ToString()) < 0)
                        {
                            return false;
                        }
                    }
                }
                tran.Complete();
                return true;
            }
        }

        /// <summary>
        /// DeleteFood
        /// </summary>
        /// <param name="dtInput"></param>
        /// <returns></returns>
        public bool DeleteFood(DataTable dtInput)
        {
            using (var tran = new System.Transactions.TransactionScope(System.Transactions.TransactionScopeOption.Required,
                 new System.Transactions.TransactionOptions { IsolationLevel = System.Transactions.IsolationLevel.ReadUncommitted }))
            {

                var sqlParams = new object[] { dtInput.Rows[0]["Id"]
                                             , CommonDataHelper.UserName
                                             };
                var result = base.ExecScalar("Food_Delete", sqlParams);
                if (NumberHelper.ConvertStringToLong(result.ToString()) < 0)
                {
                    return false;
                }

                var sqlParamsDetail = new object[] { dtInput.Rows[0]["Id"]
                                             , CommonDataHelper.UserName
                                             };
                var resultDetail = base.ExecScalar("FoodDetail_DeleteByFoodId", sqlParamsDetail);
                if (NumberHelper.ConvertStringToLong(resultDetail.ToString()) < 0)
                {
                    return false;
                }
                tran.Complete();
                return true;
            }
        }
        /// <summary>
        /// GetAllFoodDetail
        /// </summary>
        /// <param name="foodId"></param>
        /// <returns></returns>
        public DataTable GetAllFoodDetail(string foodId)
        {
            var sqlParams = new object[] { foodId};
            var result = base.ExecuteDataSet("FoodDetail_GetAll", sqlParams);
            if (result != null)
            {
                return result.Tables[0];
            }
            return null;
        }
    }
}
