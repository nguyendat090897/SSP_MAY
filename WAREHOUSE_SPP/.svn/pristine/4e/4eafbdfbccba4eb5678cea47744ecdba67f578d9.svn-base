using DSofT.Warehouse.Business;
using DSofT.Warehouse.Log.UtilHelper;
using DSofT.Warehouse.Resources;
using DSofT.Framework.UIControl;
using DSofT.Framework.UICore;
using System;
using System.Collections.Generic;
using System.Data;
using System.Linq;
using System.Windows;
using System.Windows.Data;
using System.Windows.Input;
using DevExpress.Xpf.Editors;
using DevExpress.Xpf.Grid;
using System.Text.RegularExpressions;
using System.Windows.Controls;
using System.Globalization;
using System.Windows.Media;
using DSofT.Framework.UICore.TaskProxy;
using DevExpress.Xpf.Editors.Settings;
using System.Windows.Documents;

namespace DSofT.Warehouse.UI
{
    /// <summary>
    /// Interaction logic for frm_NhapKho_popup.xaml
    /// </summary>
    public partial class frm_NhapKho_popup : PopupBase
    {
        #region Khai báo
        DataTable iDataSource = null;
        DataRow iRowSelGb = null;
        GridHelper iGridHelper = null;
        DataTable dt_PHIEU_CTIET = null;
        DataTable dt_KHO = null;
        DataTable dt_KHO_KHUVUC = null;
        DataTable dt_TRANGTHAI = null;
        DataTable dt_KHUVUC = null;
        DataTable dt_VITRIHANG = null;
        DataTable dt_TINHTRANGCV = null;
        DataTable dt_PALLET = null;
        bool isFirstLoad = false;
        bool isSecondLoad = false;
        int so_tong, so_thung, so_le = 0;
        IPHIEU_NHAPXUATKHOBussiness _IPHIEU_NHAP_XUAT_KHO;
        public static long pPHIEU_XUATNHAP_KHO_ID = 0;
        public static string pN_OR_N = "N";
        #endregion
        #region Method
        public frm_NhapKho_popup()
        {
            InitializeComponent();
            this.iDataSource = this.TableSchemaDefineBingding();
            dt_PHIEU_CTIET = this.TableSchemaDefineBingding_Grid();
            dt_PHIEU_CTIET.Clear();
            _IPHIEU_NHAP_XUAT_KHO = new PHIEU_NHAPXUATKHOBussiness(string.Empty);
            this.DataContext = this.iDataSource;
            LoadComboBox();
            Initialize_Grid_CTPHIEUNHAP();
            this.iDataSource.Rows[0]["TEN_KHO"] = ConstCommon.pTEN_KHO;
            this.iDataSource.Rows[0]["MA_DVIQLY"] = ConstCommon.DonViQuanLy;
            KiemTraNhapNhieuLan();
            chkIS_NHAPNHIEULAN.IsEnabled = false;
            isSecondLoad = false;
            IsVisibleSoLuongYeuCau();
        }
        public override void OnPopupShown()
        {
            if (this.Parameter != null && this.Parameter.Count() > 0)
            {
                iRowSelGb = this.Parameter[0] as DataRow;
                if (iRowSelGb == null)
                {
                    pN_OR_N = this.Parameter[1].ToString();
                }
                else
                {
                    pN_OR_N = this.Parameter[2].ToString();
                }
                LoadComboBox();
                Initialize_Grid_CTPHIEUNHAP();

                if (pN_OR_N == "X")
                {
                    lblngaynhap.Text = "Ngày xuất";
                    Run run = new Run("*");
                    run.Foreground = Brushes.Red;
                    lblngaynhap.Inlines.Add(run);

                    Run run1 = new Run("*");
                    run1.Foreground = Brushes.Red;

                    lblhinhthucnhap.Text = "Hình thức xuất";
                    lblhinhthucnhap.Inlines.Add(run1);
                    chkIS_NHAPNHIEULAN.Content = "Xuất nhiều lần";
                    lblkhonhap.Text = "Kho xuất";
                    btnNhapHangNhieuLan.Content = "Xuất hàng nhiều lần";
                    lblNCC.Text = "Khách hàng";
                    lbldiadiemxuathang.Text = "Địa chỉ nhận hàng";
                }
                isSecondLoad = false;
                IsVisibleSoLuongYeuCau();
                if (iRowSelGb == null)
                { return; }
                DispalayRequest();
                txtID_PHIEU_YC.Text = this.iDataSource.Rows[0]["SOPHIEU_YEUCAU"].ToString();
                pPHIEU_XUATNHAP_KHO_ID = ConstCommon.NVL_NUM_LONG_NEW(this.iDataSource.Rows[0]["PHIEU_NHAPXUATKHO_ID"].ToString());
                isFirstLoad = true;
                if (this.Parameter.Count() > 1)
                {
                    UpdateNhapNhieuLan();
                    DataRow[] dr_chitiet = this.Parameter[1] as DataRow[];               
                    dt_PHIEU_CTIET.Clear();
                    if (dr_chitiet.Length > 0)
                    {
                        txtkhonhap.Text = dr_chitiet[0]["TEN_KHO"].ToString();
                        dt_PHIEU_CTIET = dr_chitiet.CopyToDataTable();
                    }
                    if (dt_PHIEU_CTIET != null)
                    {
                        this.iGridHelper.BindItemSource(dt_PHIEU_CTIET);
                       
                    }
                    else
                    {
                        grd.ItemsSource = null;
                    }
                }
            }
        }
        public void DispalayRequest()
        {
            try
            {
                foreach (DataColumn item in this.iRowSelGb.Table.Columns)
                {
                    if (this.iDataSource.Columns[item.ColumnName] != null)
                    {
                        this.iDataSource.Rows[0][item.ColumnName] = iRowSelGb[item.ColumnName];
                    }
                }
            }
            catch (Exception ex)
            {
                UtilLog.WriteLogToDB(LogGroupName.PROGRAM, ex.Message, this.GetType().Name, "DispalayRequest()");
                base.ShowMessage(MessageType.Error, ex.Message, ex);
            }
            finally
            {
                Mouse.OverrideCursor = Cursors.Arrow;
            }
        }
        public void LoadData()
        {
            try
            {
                using (var task = new AsyncTaskProcess(this))
                {
                    ServiceAction<DataSet> action = ((pd) =>
                    {
                        task.SetCallContext();
                        return _IPHIEU_NHAP_XUAT_KHO.getKO_PHIEU_NHAPXUATKHO_BY_ID(ConstCommon.DonViQuanLy, ConstCommon.NVL_NUM_LONG_NEW(this.iDataSource.Rows[0]["PHIEU_NHAPXUATKHO_ID"]));
                    });
                    Action<DataSet> onComplete = (dt =>
                    {
                        this.Dispatcher.BeginInvoke((Action)(() =>
                        {
                            this.dt_PHIEU_CTIET = dt.Tables[1];
                            this.iGridHelper.BindItemSource(this.dt_PHIEU_CTIET);
                        }));
                    });
                    task.AsyncTaskExecute(action, onComplete);
                }
            }
            catch (Exception ex)
            {
                UtilLog.WriteLogToDB(LogGroupName.PROGRAM, ex.Message, this.GetType().Name, "LoadData()");
                base.ShowMessage(MessageType.Error, ex.Message, ex);
            }
        }
        /// <summary>
        /// TableSchemaDefineBingding
        /// </summary>
        /// <returns></returns>
        /// 
        private DataTable TableSchemaDefineBingding()
        {
            DataTable xDt = null;
            try
            {
                Dictionary<string, Type> xDicUser = new Dictionary<string, Type>();
                xDicUser.Add("MA_DVIQLY", typeof(string));
                xDicUser.Add("PHIEU_NHAPXUATKHO_ID", typeof(decimal));
                xDicUser.Add("PHIEUYEUCAU_NHAPXUATKHO_ID", typeof(decimal));
                xDicUser.Add("KHACHHANG_NCC_ID", typeof(decimal));
                xDicUser.Add("TEN_KH", typeof(string));
                xDicUser.Add("SO_HOPDONG", typeof(string));
                xDicUser.Add("TEN_DONVI_VANCHUYEN", typeof(string));
                xDicUser.Add("DIADIEM_GIAO", typeof(string));
                xDicUser.Add("KHACHHANG_NCC_DONVI_VANCHUYEN_ID", typeof(decimal));
                xDicUser.Add("KHACHHANG_NCC_NOI_XUATHANG_ID", typeof(decimal));
                xDicUser.Add("TEN_HINHTHU_NHAPXUAT", typeof(string));
                xDicUser.Add("HOPDONG_ID", typeof(decimal));
                xDicUser.Add("IS_NHAPNHIEULAN", typeof(bool));
                xDicUser.Add("NGUOILIENHE_A", typeof(string));
                xDicUser.Add("TEN_KHO", typeof(string));
                xDicUser.Add("NGUOILIENHE_B", typeof(string));
                xDicUser.Add("SO_CHUNGTU", typeof(string));
                xDicUser.Add("NGAY_CHUNGTU", typeof(string));
                xDicUser.Add("MA_HINHTHU_NHAPXUAT", typeof(string));
                xDicUser.Add("SOPHIEU", typeof(string));
                xDicUser.Add("NGAYLAP", typeof(string));
                xDicUser.Add("TEN_TAIXE", typeof(string));
                xDicUser.Add("SO_DIENTHOAI", typeof(string));
                xDicUser.Add("SO_XE", typeof(string));
                xDicUser.Add("SO_CONT", typeof(string));
                xDicUser.Add("GHI_CHU", typeof(string));
                xDicUser.Add("PHIEU_KIEMKE_ID", typeof(decimal));
                xDicUser.Add("SO_PHIEU_KIEM_KE", typeof(string));
                xDicUser.Add("SO_LUONG_TONG", typeof(int));
                xDicUser.Add("SOPHIEU_YEUCAU", typeof(string));
                xDt = TableUtil.ConvertDictionaryToTable(xDicUser, true, false);

            }
            catch (Exception ex)
            {
                UtilLog.WriteLogToDB(LogGroupName.PROGRAM, ex.Message, this.GetType().Name, "TableSchemaDefineBingding()");
                base.ShowMessage(MessageType.Error, ex.Message, ex);
            }
            return xDt;
        }
        private DataTable TableSchemaDefineBingding_Grid()
        {
            DataTable xDt = null;
            try
            {
                Dictionary<string, Type> xDicUser = new Dictionary<string, Type>();
                xDicUser.Add("STT", typeof(int));
                xDicUser.Add("MA_DVIQLY", typeof(string));
                xDicUser.Add("PHIEU_NHAPXUATKHO_CTIET_ID", typeof(decimal));
                xDicUser.Add("PHIEU_NHAPXUATKHO_ID", typeof(decimal));
                xDicUser.Add("KHO_ID", typeof(decimal));
                xDicUser.Add("KHO_KHUVUC_ID", typeof(decimal));
                xDicUser.Add("MA_ITEM_TYPE", typeof(string));
                xDicUser.Add("SANPHAM_ID", typeof(decimal));
                xDicUser.Add("SOLO", typeof(string));
                xDicUser.Add("HANDUNG", typeof(string));
                xDicUser.Add("QUYCACHDONGGOI", typeof(string));

                xDicUser.Add("SO_LUONG_PHIEU_YEU_CAU", typeof(int));

                xDicUser.Add("SO_LUONG_TONG", typeof(int));
                xDicUser.Add("SO_LUONG_THUNG", typeof(int));
                xDicUser.Add("SO_LUONG_LE", typeof(int));
                xDicUser.Add("MA_TINHTRANG_HANG", typeof(string));
                xDicUser.Add("SODK", typeof(string));
                xDicUser.Add("DONGIA", typeof(decimal));
                xDicUser.Add("THANHTIEN", typeof(decimal));
                xDicUser.Add("PALLET_ID", typeof(decimal));
                xDicUser.Add("VITRI", typeof(string));
                xDicUser.Add("MA_VACH", typeof(string));
                xDicUser.Add("NGAY_SANXUAT", typeof(string));
                xDicUser.Add("MA_TINHTRANG_CV", typeof(string));
                xDicUser.Add("IS_NHAPNHIEULAN", typeof(bool));

                xDicUser.Add("KHO_VITRI_ID", typeof(decimal));
                xDicUser.Add("MA_SANPHAM_KH", typeof(string));
                xDicUser.Add("MA_SANPHAM", typeof(string));
                xDicUser.Add("TEN_SANPHAM", typeof(string));
                xDicUser.Add("MA_DONVI_TINH", typeof(string));

                xDicUser.Add("SO_LUONG", typeof(int));
                xDicUser.Add("SO_LUONG_TONG_THUCNHAP", typeof(int));
                xDicUser.Add("SO_LUONG_THUNG_THUCNHAP", typeof(int));
                xDicUser.Add("SO_LUONG_LE_THUCNHAP", typeof(int));
                xDicUser.Add("SOLUONG_QUYDOI", typeof(int));

                xDt = TableUtil.ConvertDictionaryToTable(xDicUser, true, false);

            }
            catch (Exception ex)
            {
                UtilLog.WriteLogToDB(LogGroupName.PROGRAM, ex.Message, this.GetType().Name, "TableSchemaDefineBingding()");
                base.ShowMessage(MessageType.Error, ex.Message, ex);
            }
            return xDt;
        }
        /// <summary>
        /// Binding dữ liệu vào combobox
        /// </summary>
        private void LoadComboBox()
        {
            try
            {
                dt_KHO = _IPHIEU_NHAP_XUAT_KHO.GetListDM_KHO(ConstCommon.DonViQuanLy);
                dt_KHO_KHUVUC = _IPHIEU_NHAP_XUAT_KHO.DM_KHO_KHUVUC_GET_LIST_BY_KHO(ConstCommon.DonViQuanLy, 0);
                dt_PALLET = _IPHIEU_NHAP_XUAT_KHO.GetListDM_PALLET(ConstCommon.DonViQuanLy);
                dt_TRANGTHAI = _IPHIEU_NHAP_XUAT_KHO.GetData_For_gird_TINHTRANG_HANG(ConstCommon.DonViQuanLy);
                dt_KHUVUC = _IPHIEU_NHAP_XUAT_KHO.GetData_For_gird_TENKHO_KHUVUC(ConstCommon.DonViQuanLy);
                dt_TINHTRANGCV = _IPHIEU_NHAP_XUAT_KHO.GetData_For_gird_TINHTRANG_CV(ConstCommon.DonViQuanLy);
                dt_VITRIHANG = _IPHIEU_NHAP_XUAT_KHO.GetData_For_gird_VITRI_HANG(ConstCommon.DonViQuanLy, ConstCommon.pKHO_ID);


                DataTable dt_PHIEU_KIEM_KE = _IPHIEU_NHAP_XUAT_KHO.GetListSO_PHIEU_KIEM_KE(ConstCommon.DonViQuanLy);
                if (dt_PHIEU_KIEM_KE != null && dt_PHIEU_KIEM_KE.Rows.Count > 0)
                {
                    ComboBoxUtil.SetComboBoxEdit(cboPHIEU_KIEM_KE, "SOPHIEU", "PHIEU_KIEMKE_ID", dt_PHIEU_KIEM_KE, SelectionTypeEnum.Native);
                    ComboBoxUtil.InsertItem(cboPHIEU_KIEM_KE, Convert.ToString(UtilLanguage.ApplyLanguage()["lblChonAll"]), "0", 0);
                    this.iDataSource.Rows[0]["PHIEU_KIEMKE_ID"] = cboPHIEU_KIEM_KE.GetKeyValue(0);
                }

                DataTable dtNCC = _IPHIEU_NHAP_XUAT_KHO.GetData_For_Cbo_KhachHang_Ncc(ConstCommon.DonViQuanLy);
                if (dtNCC != null && dtNCC.Rows.Count > 0)
                {
                    ComboBoxUtil.SetComboBoxEdit(cboNCC, "TEN_KH", "KHACHHANG_NCC_ID", dtNCC, SelectionTypeEnum.Native);
                    ComboBoxUtil.InsertItem(cboNCC, Convert.ToString(UtilLanguage.ApplyLanguage()["lblChonAll"]), "0", 0);
                    this.iDataSource.Rows[0]["KHACHHANG_NCC_ID"] = cboNCC.GetKeyValue(0);
                }
                DataTable dtHinhhthucnhap = _IPHIEU_NHAP_XUAT_KHO.getDM_HINHTHU_NHAPXUAT(pN_OR_N);

                if (dtHinhhthucnhap != null && dtHinhhthucnhap.Rows.Count > 0)
                {
                    ComboBoxUtil.SetComboBoxEdit(cbohinhthucnhap, "TEN_HINHTHU_NHAPXUAT", "MA_HINHTHU_NHAPXUAT", dtHinhhthucnhap, SelectionTypeEnum.Native);
                    ComboBoxUtil.InsertItem(cbohinhthucnhap, Convert.ToString(UtilLanguage.ApplyLanguage()["lblChonAll"]), "0", 0);
                    this.iDataSource.Rows[0]["MA_HINHTHU_NHAPXUAT"] = cbohinhthucnhap.GetKeyValue(0);
                }

            }
            catch (Exception ex)
            {
                UtilLog.WriteLogToDB(LogGroupName.PROGRAM, ex.Message, this.GetType().Name, "LoadComboBox()");
                base.ShowMessage(MessageType.Error, ex.Message, ex);
            }
        }
        /// <summary>
        /// Xét rỗng các control
        /// </summary>
        private bool SetIsNull()
        {
            try
            {
                if (txtSOPHIEU.Text.Trim() == "")
                {
                    base.ShowMessage(MessageType.Information, "[SỐ PHIẾU] " + Convert.ToString(UtilLanguage.ApplyLanguage()["lblNoteNULL"]));
                    txtSOPHIEU.Focus();
                    return false;
                }
                if (ConstCommon.check_String_Unicode(txtSOPHIEU.Text.Trim()) == false)
                {
                    base.ShowMessage(MessageType.Information, "[SỐ PHIẾU] " + Convert.ToString(UtilLanguage.ApplyLanguage()["lblNoteSYMBOL"]));
                    txtSOPHIEU.Focus();
                    return false;
                }
                if (ConstCommon.check_String_Unicode(txtSO_CONT.Text.Trim()) == false)
                {
                    base.ShowMessage(MessageType.Information, "[SỐ CONTS] " + Convert.ToString(UtilLanguage.ApplyLanguage()["lblNoteSYMBOL"]));
                    txtSOPHIEU.Focus();
                    return false;
                }
                if (txtNGAYLAP.Text.Trim() == "")
                {
                    base.ShowMessage(MessageType.Information, "[NGÀY LẬP] phiếu " + Convert.ToString(UtilLanguage.ApplyLanguage()["lblNoteNULL"]));
                    txtNGAYLAP.Focus();
                    return false;
                }
                if (pN_OR_N == "N")
                {
                    if (cbohinhthucnhap.Text == "--Chọn--")
                    {
                        base.ShowMessage(MessageType.Information, "Chưa chọn [HÌNH THỨC NHẬP].");
                        cbohinhthucnhap.Focus();
                        return false;
                    }
                }
                else
                {
                    if (cbohinhthucnhap.Text == "--Chọn--")
                    {
                        base.ShowMessage(MessageType.Information, "Chưa chọn [HÌNH THỨC XUẤT].");
                        cbohinhthucnhap.Focus();
                        return false;
                    }
                }
                if (_IPHIEU_NHAP_XUAT_KHO.KO_NHAPXUATKHO_CHECKEXISTS(ConstCommon.DonViQuanLy, ConstCommon.NVL_NUM_LONG_NEW(txtPHIEUYEUCAU_NHAPKHO_ID.Text), txtSOPHIEU.Text.Trim()) == true)
                {
                    base.ShowMessage(MessageType.Information, "Số phiếu đã bị trùng, xin vui lòng nhập số khác ");
                    return false;
                }
                else
                {
                    if (dt_PHIEU_CTIET.Rows.Count == 0)
                    {
                        if (pN_OR_N == "N")
                        {
                            base.ShowMessage(MessageType.Information, "[CHI TIẾT PHIẾU NHẬP HÀNG] " + Convert.ToString(UtilLanguage.ApplyLanguage()["lblNoteNULL"]));
                            return false;
                        }
                        else
                        {
                            base.ShowMessage(MessageType.Information, "[CHI TIẾT PHIẾU XUẤT HÀNG] " + Convert.ToString(UtilLanguage.ApplyLanguage()["lblNoteNULL"]));
                            return false;
                        }
                    }
                }
                return true;
            }
            catch (Exception ex)
            {
                UtilLog.WriteLogToDB(LogGroupName.PROGRAM, ex.Message, this.GetType().Name, this.btnSave.Tag.ToString());
                base.ShowMessage(MessageType.Error, ex.Message, ex);
                return false;
            }
        }
        /// <summary>
        /// Tìm kiếm tự động trên gird
        /// </summary>
        private bool ContainDataRowInDataTable(DataTable dt, DataRow dr)
        {
            try
            {
                var k = (from r in dt.Rows.OfType<DataRow>() where r["SANPHAM_ID"].ToString() == dr["SANPHAM_ID"].ToString() select r).FirstOrDefault();
                if (k != null)
                {
                    return true;
                }
                else
                {
                    return false;
                }
            }
            catch
            {

                return false;
            }
        }
        /// <summary>
        /// Set, get checkbox nhập nhiều lần
        /// </summary>
        private void KiemTraNhapNhieuLan()
        {
            if (chkIS_NHAPNHIEULAN.IsChecked == true)
            {
                this.iDataSource.Rows[0]["IS_NHAPNHIEULAN"] = 1;
                btnNhapHangNhieuLan.Visibility = Visibility.Visible;
            }
            else
            {
                this.iDataSource.Rows[0]["IS_NHAPNHIEULAN"] = 0;
                btnNhapHangNhieuLan.Visibility = Visibility.Hidden;
            }
        }
        private void UpdateNhapNhieuLan()
        {
            if (this.iDataSource.Rows[0]["IS_NHAPNHIEULAN"].ToString() == "True")
            {
                chkIS_NHAPNHIEULAN.IsChecked = true;
                btnNhapHangNhieuLan.Visibility = Visibility.Visible;
            }
            else
            {
                chkIS_NHAPNHIEULAN.IsChecked = false;
                btnNhapHangNhieuLan.Visibility = Visibility.Hidden;
            }
        }
        private void IsVisibleSoLuongYeuCau()
        {
            if (isSecondLoad == true)
            {
                grd.Columns["SO_LUONG_PHIEU_YEU_CAU"].Visible = true;
            }
            else
            {
                grd.Columns["SO_LUONG_PHIEU_YEU_CAU"].Visible = false;
            }
        }
        /// <summary>
        /// Binding gird
        /// </summary>
        private void Initialize_Grid_CTPHIEUNHAP()
        {
            try
            {
                this.iGridHelper = new GridHelper(this.grd, this.grdView, false);
                Column xColumn;

                xColumn = new Column("STT", Convert.ToString(UtilLanguage.ApplyLanguage()["lblOrderNo"]));
                xColumn.Width = 50;
                xColumn.Visible = true;
                xColumn.HorizontalContentAlignment = DevExpress.Xpf.Editors.Settings.EditSettingsHorizontalAlignment.Center;
                xColumn.AllowEditing = DevExpress.Utils.DefaultBoolean.False;
                this.iGridHelper.Add(xColumn);

                xColumn = new Column("MA_SANPHAM", Convert.ToString(UtilLanguage.ApplyLanguage()["frm_lapphieu_yeucau_nhapkho_popup_MaThuoc"]));
                xColumn.Width = 100;
                xColumn.Visible = true;
                xColumn.HorizontalContentAlignment = DevExpress.Xpf.Editors.Settings.EditSettingsHorizontalAlignment.Left;
                xColumn.AllowEditing = DevExpress.Utils.DefaultBoolean.False;
                this.iGridHelper.Add(xColumn);

                xColumn = new Column("MA_SANPHAM_KH", Convert.ToString(UtilLanguage.ApplyLanguage()["lblMaThuoc1"]));
                xColumn.Width = 150;
                xColumn.Visible = true;
                xColumn.HorizontalContentAlignment = DevExpress.Xpf.Editors.Settings.EditSettingsHorizontalAlignment.Left;
                xColumn.AllowEditing = DevExpress.Utils.DefaultBoolean.False;
                this.iGridHelper.Add(xColumn);

                xColumn = new Column("TEN_SANPHAM", Convert.ToString(UtilLanguage.ApplyLanguage()["frm_lapphieu_yeucau_nhapkho_popup_TenThuoc"]));
                xColumn.Width = 120;
                xColumn.Visible = true;
                xColumn.HorizontalContentAlignment = DevExpress.Xpf.Editors.Settings.EditSettingsHorizontalAlignment.Left;
                xColumn.AllowEditing = DevExpress.Utils.DefaultBoolean.False;
                this.iGridHelper.Add(xColumn);

                xColumn = new Column("SOLO", Convert.ToString(UtilLanguage.ApplyLanguage()["frm_lapphieu_yeucau_nhapkho_popup_SoLo"]));
                xColumn.Width = 80;
                xColumn.Visible = true;
                xColumn.HorizontalContentAlignment = DevExpress.Xpf.Editors.Settings.EditSettingsHorizontalAlignment.Left;
                xColumn.AllowEditing = DevExpress.Utils.DefaultBoolean.True;
                this.iGridHelper.Add(xColumn);


                xColumn = new Column("HANDUNG", Convert.ToString(UtilLanguage.ApplyLanguage()["frm_lapphieu_yeucau_nhapkho_popup_HanDung"]));
                xColumn.Width = 80;
                xColumn.Visible = true;
                xColumn.HorizontalContentAlignment = DevExpress.Xpf.Editors.Settings.EditSettingsHorizontalAlignment.Left;
                xColumn.AllowEditing = DevExpress.Utils.DefaultBoolean.True;
                this.iGridHelper.Add(xColumn);

                xColumn = new Column("QUYCACHDONGGOI", Convert.ToString(UtilLanguage.ApplyLanguage()["lbl_QuyCachDongGoi"]));
                xColumn.Width = 150;
                xColumn.Visible = true;
                xColumn.HorizontalContentAlignment = DevExpress.Xpf.Editors.Settings.EditSettingsHorizontalAlignment.Left;
                xColumn.AllowEditing = DevExpress.Utils.DefaultBoolean.True;
                this.iGridHelper.Add(xColumn);


                xColumn = new Column("MA_DONVI_TINH", Convert.ToString(UtilLanguage.ApplyLanguage()["frm_lapphieu_yeucau_nhapkho_popup_DonViTinh"]));
                xColumn.Width = 80;
                xColumn.Visible = true;
                xColumn.HorizontalContentAlignment = DevExpress.Xpf.Editors.Settings.EditSettingsHorizontalAlignment.Left;
                xColumn.AllowEditing = DevExpress.Utils.DefaultBoolean.False;
                this.iGridHelper.Add(xColumn);

                xColumn = new Column("SO_LUONG_PHIEU_YEU_CAU", "Số lượng phiếu yêu cầu");
                xColumn.Width = 150;
                xColumn.Visible = true;
                xColumn.MaskType = MaskType.Numeric;
                xColumn.EditMask = "#,##,##,##,##,##,##,##,##,##,##,##,##,###;";
                xColumn.AllowEditing = DevExpress.Utils.DefaultBoolean.False;
                xColumn.HorizontalContentAlignment = DevExpress.Xpf.Editors.Settings.EditSettingsHorizontalAlignment.Right;
                this.iGridHelper.Add(xColumn);

                xColumn = new Column("SO_LUONG_TONG", Convert.ToString(UtilLanguage.ApplyLanguage()["frm_danhsach_loaipallet_SoLuongTong"]));
                xColumn.Width = 100;
                xColumn.Visible = true;
                xColumn.MaskType = MaskType.Numeric;
                xColumn.EditMask = "#,##,##,##,##,##,##,##,##,##,##,##,##,###;";
                xColumn.AllowEditing = DevExpress.Utils.DefaultBoolean.True;
                xColumn.HorizontalContentAlignment = DevExpress.Xpf.Editors.Settings.EditSettingsHorizontalAlignment.Right;
                this.iGridHelper.Add(xColumn);

                xColumn = new Column("SO_LUONG_THUNG", Convert.ToString(UtilLanguage.ApplyLanguage()["lblSoThung"]));
                xColumn.Width = 80;
                xColumn.Visible = true;
                xColumn.MaskType = MaskType.Numeric;
                xColumn.EditMask = "#,##,##,##,##,##,##,##,##,##,##,##,##,###;";
                xColumn.AllowEditing = DevExpress.Utils.DefaultBoolean.True;
                xColumn.HorizontalContentAlignment = DevExpress.Xpf.Editors.Settings.EditSettingsHorizontalAlignment.Right;
                this.iGridHelper.Add(xColumn);

                xColumn = new Column("SO_LUONG_LE", Convert.ToString(UtilLanguage.ApplyLanguage()["lblSoLe"]));
                xColumn.Width = 80;
                xColumn.Visible = true;
                xColumn.MaskType = MaskType.Numeric;
                xColumn.EditMask = "#,##,##,##,##,##,##,##,##,##,##,##,##,###;";
                xColumn.AllowEditing = DevExpress.Utils.DefaultBoolean.True;
                xColumn.HorizontalContentAlignment = DevExpress.Xpf.Editors.Settings.EditSettingsHorizontalAlignment.Right;
                this.iGridHelper.Add(xColumn);

                string[] header_tt = new string[] { Convert.ToString(UtilLanguage.ApplyLanguage()["lblChangeStatus"]) };
                string[] id_tt = new string[] { "TEN_TINHTRANG_HANG" };
                string[] align_tt = new string[] { "left" };
                xColumn = new Column("MA_TINHTRANG_HANG", Convert.ToString(UtilLanguage.ApplyLanguage()["lblChangeStatus"])); 
                xColumn.Width = 150;
                xColumn.Visible = true;
                xColumn.HorizontalContentAlignment = DevExpress.Xpf.Editors.Settings.EditSettingsHorizontalAlignment.Left;
                xColumn.AllowEditing = DevExpress.Utils.DefaultBoolean.True;
                xColumn.ColumnType = ColumnControl.LookUpEdit;
                xColumn.AllowAutoFilter = true;
                xColumn.AllowColumnFiltering = true;
                xColumn.Binding = new System.Windows.Data.Binding("MA_TINHTRANG_HANG") { Mode = BindingMode.TwoWay, UpdateSourceTrigger = UpdateSourceTrigger.PropertyChanged };
                xColumn.ValueList.DataSource = dt_TRANGTHAI;
                xColumn.ValueList.DisplayMember = "TEN_TINHTRANG_HANG";
                xColumn.ValueList.ValueMember = "MA_TINHTRANG_HANG";
                xColumn.dataTemplate = LookupEditUtil.CreateTemplateLookupEdit(dt_TRANGTHAI, header_tt, id_tt, align_tt);
                this.iGridHelper.Add(xColumn);//combobox

                string[] header_kv = new string[] { Convert.ToString(UtilLanguage.ApplyLanguage()["lblKhuVuc"]) }; 
                string[] id_kv = new string[] { "TEN_KHO_KHUVUC" };
                string[] align_kv = new string[] { "left" };
                xColumn = new Column("KHO_KHUVUC_ID", Convert.ToString(UtilLanguage.ApplyLanguage()["lblKhuVuc"]));
                xColumn.Width = 150;
                xColumn.Visible = true;
                xColumn.HorizontalContentAlignment = DevExpress.Xpf.Editors.Settings.EditSettingsHorizontalAlignment.Left;
                xColumn.AllowEditing = DevExpress.Utils.DefaultBoolean.True;
                xColumn.ColumnType = ColumnControl.LookUpEdit;
                xColumn.AllowAutoFilter = true;
                xColumn.AllowColumnFiltering = true;
                xColumn.Binding = new System.Windows.Data.Binding("KHO_KHUVUC_ID") { Mode = BindingMode.TwoWay, UpdateSourceTrigger = UpdateSourceTrigger.PropertyChanged };
                xColumn.ValueList.DataSource = dt_KHUVUC;
                xColumn.ValueList.DisplayMember = "TEN_KHO_KHUVUC";
                xColumn.ValueList.ValueMember = "KHO_KHUVUC_ID";
                xColumn.dataTemplate = LookupEditUtil.CreateTemplateLookupEdit(dt_KHUVUC, header_kv, id_kv, align_kv);
                this.iGridHelper.Add(xColumn);

                xColumn = new Column("SODK", Convert.ToString(UtilLanguage.ApplyLanguage()["lbSDK"])); 
                xColumn.Width = 80;
                xColumn.Visible = true;
                xColumn.HorizontalContentAlignment = DevExpress.Xpf.Editors.Settings.EditSettingsHorizontalAlignment.Left;
                xColumn.AllowEditing = DevExpress.Utils.DefaultBoolean.True;
                this.iGridHelper.Add(xColumn);

                xColumn = new Column("DONGIA", Convert.ToString(UtilLanguage.ApplyLanguage()["frm_lapphieu_yeucau_nhapkho_popup_GiaNhap"]));
                xColumn.Width = 80;
                xColumn.Visible = true;
                xColumn.MaskType = MaskType.Numeric;
                xColumn.EditMask = "#,##,##,##,##,##,##,##,##,##,##,##,##,###;";
                xColumn.HorizontalContentAlignment = DevExpress.Xpf.Editors.Settings.EditSettingsHorizontalAlignment.Right;
                xColumn.AllowEditing = DevExpress.Utils.DefaultBoolean.True;
                this.iGridHelper.Add(xColumn);

                xColumn = new Column("THANHTIEN", Convert.ToString(UtilLanguage.ApplyLanguage()["frm_lapphieu_yeucau_nhapkho_popup_ThanhTien"]));
                xColumn.Width = 120;
                xColumn.Visible = true;
                xColumn.MaskType = MaskType.Numeric;
                xColumn.EditMask = "#,##,##,##,##,##,##,##,##,##,##,##,##,###;"; ;
                xColumn.HorizontalContentAlignment = DevExpress.Xpf.Editors.Settings.EditSettingsHorizontalAlignment.Right;
                xColumn.AllowEditing = DevExpress.Utils.DefaultBoolean.False;
                this.iGridHelper.Add(xColumn);

                string[] header_pl = new string[] { Convert.ToString(UtilLanguage.ApplyLanguage()["lblTenPallet"]) }; 
                string[] id_pl = new string[] { "TEN_PALLET" };
                string[] align_pl = new string[] { "left" };
                xColumn = new Column("PALLET_ID", Convert.ToString(UtilLanguage.ApplyLanguage()["lblTenPallet"]));
                xColumn.Width = 80;
                xColumn.Visible = true;
                xColumn.HorizontalContentAlignment = DevExpress.Xpf.Editors.Settings.EditSettingsHorizontalAlignment.Left;
                xColumn.AllowEditing = DevExpress.Utils.DefaultBoolean.True;
                xColumn.ColumnType = ColumnControl.LookUpEdit;
                xColumn.AllowAutoFilter = true;
                xColumn.AllowColumnFiltering = true;
                xColumn.Binding = new System.Windows.Data.Binding("PALLET_ID") { Mode = BindingMode.TwoWay, UpdateSourceTrigger = UpdateSourceTrigger.PropertyChanged };
                xColumn.ValueList.DataSource = dt_PALLET;
                xColumn.ValueList.DisplayMember = "TEN_PALLET";
                xColumn.ValueList.ValueMember = "PALLET_ID";
                xColumn.dataTemplate = LookupEditUtil.CreateTemplateLookupEdit(dt_PALLET, header_pl, id_pl, align_pl);
                this.iGridHelper.Add(xColumn);

                string[] header_vth = new string[] { Convert.ToString(UtilLanguage.ApplyLanguage()["lblViTriHang"]) }; 
                string[] id_vth = new string[] { "VITRI" };
                string[] align_vth = new string[] { "left" };
                xColumn = new Column("VITRI", Convert.ToString(UtilLanguage.ApplyLanguage()["lblViTriHang"]));
                xColumn.Width = 100;
                xColumn.Visible = true;
                xColumn.HorizontalContentAlignment = DevExpress.Xpf.Editors.Settings.EditSettingsHorizontalAlignment.Left;
                xColumn.AllowEditing = DevExpress.Utils.DefaultBoolean.True;
                xColumn.ColumnType = ColumnControl.LookUpEdit;
                xColumn.AllowAutoFilter = true;
                xColumn.AllowColumnFiltering = true;
                xColumn.Binding = new System.Windows.Data.Binding("VITRI") { Mode = BindingMode.TwoWay, UpdateSourceTrigger = UpdateSourceTrigger.PropertyChanged };
                xColumn.ValueList.DataSource = dt_VITRIHANG;
                xColumn.ValueList.DisplayMember = "VITRI";
                xColumn.ValueList.ValueMember = "VITRI";
                xColumn.dataTemplate = LookupEditUtil.CreateTemplateLookupEdit(dt_VITRIHANG, header_vth, id_vth, align_vth);
                this.iGridHelper.Add(xColumn);//COMBOBOX

                xColumn = new Column("MA_VACH", Convert.ToString(UtilLanguage.ApplyLanguage()["lblTaoMaVach"])); 
                xColumn.Width = 80;
                xColumn.Visible = true;
                xColumn.HorizontalContentAlignment = DevExpress.Xpf.Editors.Settings.EditSettingsHorizontalAlignment.Left;
                xColumn.AllowEditing = DevExpress.Utils.DefaultBoolean.True;
                this.iGridHelper.Add(xColumn);//BUTTON

                xColumn = new Column("NGAY_SANXUAT", Convert.ToString(UtilLanguage.ApplyLanguage()["lblNgaySanXuat"])); 
                xColumn.Width = 100;
                xColumn.Visible = true;
                xColumn.HorizontalContentAlignment = DevExpress.Xpf.Editors.Settings.EditSettingsHorizontalAlignment.Left;
                xColumn.AllowEditing = DevExpress.Utils.DefaultBoolean.True;
                this.iGridHelper.Add(xColumn);

                
                string[] header_ttcv = new string[] { Convert.ToString(UtilLanguage.ApplyLanguage()["lbTinhTrangCV"]) }; 
                string[] id_ttcv = new string[] { "TEN_TINHTRANG_CV" };
                string[] align_ttcv = new string[] { "left" };
                xColumn = new Column("MA_TINHTRANG_CV", Convert.ToString(UtilLanguage.ApplyLanguage()["lbTinhTrangCV"]));
                xColumn.Width = 150;
                xColumn.Visible = true;
                xColumn.HorizontalContentAlignment = DevExpress.Xpf.Editors.Settings.EditSettingsHorizontalAlignment.Left;
                xColumn.AllowEditing = DevExpress.Utils.DefaultBoolean.True;
                xColumn.ColumnType = ColumnControl.LookUpEdit;
                xColumn.AllowAutoFilter = true;
                xColumn.AllowColumnFiltering = true;
                xColumn.Binding = new System.Windows.Data.Binding("MA_TINHTRANG_CV") { Mode = BindingMode.TwoWay, UpdateSourceTrigger = UpdateSourceTrigger.PropertyChanged };
                xColumn.ValueList.DataSource = dt_TINHTRANGCV;
                xColumn.ValueList.DisplayMember = "TEN_TINHTRANG_CV";
                xColumn.ValueList.ValueMember = "MA_TINHTRANG_CV";
                xColumn.dataTemplate = LookupEditUtil.CreateTemplateLookupEdit(dt_TINHTRANGCV, header_ttcv, id_ttcv, align_ttcv);
                this.iGridHelper.Add(xColumn);//COMBOBOX

                if (pN_OR_N == "N")
                {
                    xColumn = new Column("THUC_NHAP", Convert.ToString(UtilLanguage.ApplyLanguage()["lblThucNhap"]));
                    xColumn.Width = 80;
                    xColumn.Visible = true;
                    xColumn.MaskType = MaskType.Numeric;
                    xColumn.EditMask = "#,##,##,##,##,##,##,##,##,##,##,##,##,###;";
                    xColumn.HorizontalContentAlignment = DevExpress.Xpf.Editors.Settings.EditSettingsHorizontalAlignment.Left;
                    xColumn.AllowEditing = DevExpress.Utils.DefaultBoolean.True;
                    this.iGridHelper.Add(xColumn);

                    xColumn = new Column("IS_NHAPNHIEULAN", Convert.ToString(UtilLanguage.ApplyLanguage()["lblNhapNhieuLan"]));
                    xColumn.Width = 100;
                    xColumn.Visible = true;
                    xColumn.HorizontalContentAlignment = DevExpress.Xpf.Editors.Settings.EditSettingsHorizontalAlignment.Left;
                    xColumn.AllowEditing = DevExpress.Utils.DefaultBoolean.False;
                    xColumn.ColumnType = ColumnControl.Checkbox;
                    xColumn.Binding = new Binding("IS_NHAPNHIEULAN") { Converter = new ConverterStringBool(), ConverterParameter = "1:0", Mode = BindingMode.TwoWay };
                    this.iGridHelper.Add(xColumn);//CHECKBOX
                }
                else
                {
                    xColumn = new Column("THUC_NHAP", Convert.ToString(UtilLanguage.ApplyLanguage()["lblThucXuat"]));
                    xColumn.Width = 80;
                    xColumn.Visible = true;
                    xColumn.MaskType = MaskType.Numeric;
                    xColumn.EditMask = "#,##,##,##,##,##,##,##,##,##,##,##,##,###;";
                    xColumn.HorizontalContentAlignment = DevExpress.Xpf.Editors.Settings.EditSettingsHorizontalAlignment.Left;
                    xColumn.AllowEditing = DevExpress.Utils.DefaultBoolean.True;
                    this.iGridHelper.Add(xColumn);

                    xColumn = new Column("IS_NHAPNHIEULAN", Convert.ToString(UtilLanguage.ApplyLanguage()["lblXuatNhieuLan"]));
                    xColumn.Width = 100;
                    xColumn.Visible = true;
                    xColumn.HorizontalContentAlignment = DevExpress.Xpf.Editors.Settings.EditSettingsHorizontalAlignment.Left;
                    xColumn.AllowEditing = DevExpress.Utils.DefaultBoolean.False;
                    xColumn.ColumnType = ColumnControl.Checkbox;
                    xColumn.Binding = new Binding("IS_NHAPNHIEULAN") { Converter = new ConverterStringBool(), ConverterParameter = "1:0", Mode = BindingMode.TwoWay };
                    this.iGridHelper.Add(xColumn);//CHECKBOX
                } 

                xColumn = new Column("SOLUONG_QUYDOI", "Qui đổi");
                xColumn.Width = 80;
                xColumn.Visible = false;
                xColumn.MaskType = MaskType.Numeric;
                xColumn.HorizontalContentAlignment = DevExpress.Xpf.Editors.Settings.EditSettingsHorizontalAlignment.Left;
                xColumn.AllowEditing = DevExpress.Utils.DefaultBoolean.True;
                this.iGridHelper.Add(xColumn);

                var converter = new System.Windows.Media.BrushConverter();
                var brush = (Brush)converter.ConvertFromString("#F2F2F2");
                
                this.grdView.AddFormatCondition(new FormatCondition()
                {
                    FieldName = "SO_LUONG_PHIEU_YEU_CAU",
                    Format = new Format() { Foreground = Brushes.Red },
                    Expression = "[SO_LUONG_PHIEU_YEU_CAU] != null",
                    ApplyToRow = false
                });
                this.grdView.AddFormatCondition(new FormatCondition()
                {
                    FieldName = "SO_LUONG_THUNG",
                    Format = new Format() { Background = brush },
                    Expression = "[SOLUONG_QUYDOI] == null", // #
                    ApplyToRow = false
                });

                this.grdView.AddFormatCondition(new FormatCondition()
                {
                    FieldName = "SO_LUONG_LE",
                    Format = new Format() { Background = brush },
                    Expression = "[SOLUONG_QUYDOI] == null", // #
                    ApplyToRow = false
                });

                this.iGridHelper.Initialize();
            }
            catch (Exception ex)
            {
                UtilLog.WriteLogToDB(LogGroupName.PROGRAM, ex.Message, this.GetType().Name, "Initialize_Grid()");
                base.ShowMessage(MessageType.Error, ex.Message, ex);
            }
        }
       

        #endregion
        #region UI
        private void cboNCC_EditValueChanged(object sender, EditValueChangedEventArgs e)
        {
            try
            {
                DataTable dtDDXH = _IPHIEU_NHAP_XUAT_KHO.getDIADIEM_XUATHANG_BY_NCC(ConstCommon.DonViQuanLy, ConstCommon.NVL_NUM_LONG_NEW(this.iDataSource.Rows[0]["KHACHHANG_NCC_ID"]));
                if (dtDDXH != null && dtDDXH.Rows.Count > 0)
                {
                    ComboBoxUtil.SetComboBoxEdit(cboDiadiemxuathang, "DIADIEM_GIAO", "KHACHHANG_NCC_NOI_XUATHANG_ID", dtDDXH, SelectionTypeEnum.Native);
                    ComboBoxUtil.InsertItem(cboDiadiemxuathang, Convert.ToString(UtilLanguage.ApplyLanguage()["lblChonAll"]), "0", 0);
                    if (isFirstLoad == false)
                    {
                        this.iDataSource.Rows[0]["KHACHHANG_NCC_NOI_XUATHANG_ID"] = cboDiadiemxuathang.GetKeyValue(0);
                    }
                }
                else
                {
                    cboDiadiemxuathang.ItemsSource = null;
                }

                DataTable dtDonvivanchuyen = _IPHIEU_NHAP_XUAT_KHO.getDONVIVANCHUYEN_BY_NCC(ConstCommon.DonViQuanLy, ConstCommon.NVL_NUM_LONG_NEW(this.iDataSource.Rows[0]["KHACHHANG_NCC_ID"]));
                if (dtDonvivanchuyen != null && dtDonvivanchuyen.Rows.Count > 0)
                {
                    ComboBoxUtil.SetComboBoxEdit(cboDonvivanchuyen, "TEN_DONVI_VANCHUYEN", "KHACHHANG_NCC_DONVI_VANCHUYEN_ID", dtDonvivanchuyen, SelectionTypeEnum.Native);
                    ComboBoxUtil.InsertItem(cboDonvivanchuyen, Convert.ToString(UtilLanguage.ApplyLanguage()["lblChonAll"]), "0", 0);
                    if (isFirstLoad == false)
                    {
                        this.iDataSource.Rows[0]["KHACHHANG_NCC_DONVI_VANCHUYEN_ID"] = cboDonvivanchuyen.GetKeyValue(0);
                    }
                }
                else
                {
                    cboDonvivanchuyen.ItemsSource = null;
                }
            }
            catch (Exception ex)
            {
                UtilLog.WriteLogToDB(LogGroupName.PROGRAM, ex.Message, this.GetType().Name, this.btnImport.Tag.ToString());
                base.ShowMessage(MessageType.Error, ex.Message, ex);
            }
            finally
            {
                isFirstLoad = false;
            }
        }

        private void btnChonSPBSung_Click(object sender, RoutedEventArgs e)
        {
            try
            {
                object xReturn = null;
                if (pN_OR_N == "N")
                {
                    xReturn =  UIAgent.GetUIPopupDialog(this, null, this.GetType().ToString(), "DSofT.Warehouse.UI", "frm_XDDinhMuc_BoSung_TTTViet_TimKiemSP", null);
                }
                else
                {
                    xReturn = UIAgent.GetUIPopupDialog(this, null, this.GetType().ToString(), "DSofT.Warehouse.UI", "frm_XDDinhMuc_BoSung_TTTViet_TimKiemSP_Kho", null);
                }
                DataTable dt_SPCHON = (DataTable)xReturn;
                if ((dt_SPCHON != null) && (dt_SPCHON.Rows.Count > 0))
                {
                    isSecondLoad = false;
                    IsVisibleSoLuongYeuCau();
                    if (dt_SPCHON.Rows[0]["GHI_CHU"].ToString() == "Y")
                    {
                        this.iDataSource.Rows[0]["PHIEUYEUCAU_NHAPXUATKHO_ID"] = 0;
                        for (int i = 0; i < dt_SPCHON.Rows.Count; i++)
                        {
                            if (ContainDataRowInDataTable(dt_PHIEU_CTIET, dt_SPCHON.Rows[i]) == false)
                            {
                                DataRow dr = dt_PHIEU_CTIET.NewRow();
                                dr["STT"] = dt_PHIEU_CTIET.Rows.Count + 1;
                                dr["MA_DVIQLY"] = ConstCommon.DonViQuanLy;
                                dr["PHIEU_NHAPXUATKHO_ID"] = "0";
                                dr["KHO_ID"] = ConstCommon.pKHO_ID;
                                dr["KHO_KHUVUC_ID"] = "0";
                                dr["MA_ITEM_TYPE"] = dt_SPCHON.Rows[i]["MA_ITEM_TYPE"];
                                dr["SANPHAM_ID"] = dt_SPCHON.Rows[i]["SANPHAM_ID"];
                                dr["MA_SANPHAM_KH"] = dt_SPCHON.Rows[i]["MA_SANPHAM_KH"];
                                dr["MA_SANPHAM"] = dt_SPCHON.Rows[i]["MA_SANPHAM"];
                                dr["TEN_SANPHAM"] = dt_SPCHON.Rows[i]["TEN_SANPHAM"];
                                dr["QUYCACHDONGGOI"] = dt_SPCHON.Rows[i]["QUYCACHDONGGOI"];
                                dr["MA_DONVI_TINH"] = dt_SPCHON.Rows[i]["MA_DONVI_TINH"];
                                dr["SOLUONG_QUYDOI"] = dt_SPCHON.Rows[i]["SOLUONG_QUYDOI"];
                                
                                txtID_PHIEU_YC.Text = String.Empty;
                                dt_PHIEU_CTIET.Rows.Add(dr);
                            }
                        }
                    }

                }
                if (dt_PHIEU_CTIET != null)
                {
                    this.iGridHelper.BindItemSource(dt_PHIEU_CTIET);
                }
                else
                {
                    grd.ItemsSource = null;
                }
            }
            catch (Exception ex)
            {
                UtilLog.WriteLogToDB(LogGroupName.PROGRAM, ex.Message, this.GetType().Name, this.btnChonSPBSung.Tag.ToString());
                base.ShowMessage(MessageType.Error, ex.Message, ex);
            }
        }

        private void btnXoadong_Click(object sender, RoutedEventArgs e)
        {
            try
            {
                bool msg = false;
                if ((dt_PHIEU_CTIET == null) || (dt_PHIEU_CTIET.Rows.Count == 0))
                {
                    return;
                }
                if (this.grd.GetFocusedRow() == null) return;
                DataRowView row = this.grd.GetFocusedRow() as DataRowView;

                if (ConstCommon.NVL_NUM_LONG_NEW(row.Row["PHIEU_NHAPXUATKHO_CTIET_ID"]) > 0)
                {
                    msg = (bool)base.ShowMessage(MessageType.OkCancel, "Bạn có muốn xóa dòng đang chọn trong phiếu không");
                    if (msg == true)
                    {
                        DataTable dsReturn = _IPHIEU_NHAP_XUAT_KHO.KO_PHIEU_NHAPXUATKHO_CTIET_DELETE(ConstCommon.DonViQuanLy, ConstCommon.NVL_NUM_LONG_NEW(row.Row["PHIEU_NHAPXUATKHO_CTIET_ID"]), CommonDataHelper.UserName);
                        if ((dsReturn == null) || dsReturn.Rows.Count == 0 || dsReturn.Rows[0][0].ToString() == "0")
                        {
                            return;
                        }
                    }
                    else
                    {
                        return;
                    }
                }
                dt_PHIEU_CTIET.Rows.Remove(row.Row);
                this.iGridHelper.BindItemSource(dt_PHIEU_CTIET);
            }
            catch (Exception ex)
            {
                UtilLog.WriteLogToDB(LogGroupName.PROGRAM, ex.Message, this.GetType().Name, this.btnXoadong.Tag.ToString());
                base.ShowMessage(MessageType.Error, ex.Message, ex);
            }
        }

        private void btnChonPhieuYC_Click(object sender, RoutedEventArgs e)
        {
            try
            {
                chkIS_NHAPNHIEULAN.IsChecked = false;
                object xReturn = UIAgent.GetUIPopupDialog(this, null, this.GetType().ToString(), "DSofT.Warehouse.UI", "frm_NhapKho_popup_phieu_yeu_cau", null);
                DataSet ds_Return= (DataSet)xReturn;
                if (ds_Return == null) return;
                DataTable dt_PHIEU_YEUCCAU_CT_CHON = ds_Return.Tables[1];
                DataTable dt_PHIEU_YEUCCAU_CHON = ds_Return.Tables[0];
                //begin tao phieu chi tiet
                if ((dt_PHIEU_YEUCCAU_CT_CHON != null) && (dt_PHIEU_YEUCCAU_CT_CHON.Rows.Count > 0))
                {
                    isSecondLoad = true;
                    IsVisibleSoLuongYeuCau();
                    if (dt_PHIEU_YEUCCAU_CHON.Rows[0]["GHI_CHU"].ToString() == "Y")
                    {
                        dt_PHIEU_CTIET = this.TableSchemaDefineBingding_Grid();
                        dt_PHIEU_CTIET.Clear();
                        this.iDataSource.Rows[0]["PHIEU_NHAPXUATKHO_ID"] = 0;
                        txtPHIEUYEUCAU_NHAPKHO_ID.Text = "";
                        this.iDataSource.Rows[0]["PHIEUYEUCAU_NHAPXUATKHO_ID"] = dt_PHIEU_YEUCCAU_CHON.Rows[0]["PHIEUYEUCAU_NHAPXUATKHO_ID"];
                        txtID_PHIEU_YC.Text = dt_PHIEU_YEUCCAU_CHON.Rows[0]["SOPHIEU"].ToString();
                        this.iDataSource.Rows[0]["MA_DVIQLY"] = dt_PHIEU_YEUCCAU_CHON.Rows[0]["MA_DVIQLY"];
                        this.iDataSource.Rows[0]["KHACHHANG_NCC_ID"] = dt_PHIEU_YEUCCAU_CHON.Rows[0]["KHACHHANG_NCC_ID"];
                        this.iDataSource.Rows[0]["HOPDONG_ID"] = dt_PHIEU_YEUCCAU_CHON.Rows[0]["HOPDONG_ID"];
                        this.iDataSource.Rows[0]["KHACHHANG_NCC_DONVI_VANCHUYEN_ID"] = dt_PHIEU_YEUCCAU_CHON.Rows[0]["KHACHHANG_NCC_DONVI_VANCHUYEN_ID"];
                        this.iDataSource.Rows[0]["KHACHHANG_NCC_NOI_XUATHANG_ID"] = dt_PHIEU_YEUCCAU_CHON.Rows[0]["KHACHHANG_NCC_NOI_XUATHANG_ID"];
                        this.iDataSource.Rows[0]["NGUOILIENHE_A"] = dt_PHIEU_YEUCCAU_CHON.Rows[0]["NGUOILIENHE_A"];
                        this.iDataSource.Rows[0]["NGUOILIENHE_B"] = dt_PHIEU_YEUCCAU_CHON.Rows[0]["NGUOILIENHE_B"];
                        this.iDataSource.Rows[0]["SO_CHUNGTU"] = dt_PHIEU_YEUCCAU_CHON.Rows[0]["SO_CHUNGTU"];
                        this.iDataSource.Rows[0]["NGAY_CHUNGTU"] = dt_PHIEU_YEUCCAU_CHON.Rows[0]["NGAY_CHUNGTU"];
                        this.iDataSource.Rows[0]["MA_HINHTHU_NHAPXUAT"] = dt_PHIEU_YEUCCAU_CHON.Rows[0]["MA_HINHTHU_NHAPXUAT"];
                        this.iDataSource.Rows[0]["SOPHIEU"] = String.Empty;
                        this.iDataSource.Rows[0]["NGAYLAP"] = dt_PHIEU_YEUCCAU_CHON.Rows[0]["NGAYLAP"];
                        this.iDataSource.Rows[0]["TEN_TAIXE"] = dt_PHIEU_YEUCCAU_CHON.Rows[0]["TEN_TAIXE"];
                        this.iDataSource.Rows[0]["SO_DIENTHOAI"] = dt_PHIEU_YEUCCAU_CHON.Rows[0]["SO_DIENTHOAI"];
                        this.iDataSource.Rows[0]["SO_XE"] = dt_PHIEU_YEUCCAU_CHON.Rows[0]["SO_XE"];
                        this.iDataSource.Rows[0]["SO_CONT"] = dt_PHIEU_YEUCCAU_CHON.Rows[0]["SO_CONT"];
                        this.iDataSource.Rows[0]["IS_NHAPNHIEULAN"] = 0;
                        this.iDataSource.Rows[0]["GHI_CHU"] = string.Empty;
                        this.iDataSource.Rows[0]["PHIEU_KIEMKE_ID"] = 0;
                        for (int i = 0; i < dt_PHIEU_YEUCCAU_CT_CHON.Rows.Count ; i++)
                        {
                            if (ContainDataRowInDataTable(dt_PHIEU_CTIET, dt_PHIEU_YEUCCAU_CT_CHON.Rows[i]) == false)
                            {
                                DataRow dr = dt_PHIEU_CTIET.NewRow();
                                dr["STT"] = dt_PHIEU_CTIET.Rows.Count + 1;
                                dr["MA_DVIQLY"] = ConstCommon.DonViQuanLy;
                                dr["PHIEU_NHAPXUATKHO_ID"] = "0";
                                dr["KHO_ID"] = ConstCommon.pKHO_ID;
                                dr["KHO_KHUVUC_ID"] = "0";
                                dr["SANPHAM_ID"] = dt_PHIEU_YEUCCAU_CT_CHON.Rows[i]["SANPHAM_ID"];
                                dr["MA_SANPHAM_KH"] = dt_PHIEU_YEUCCAU_CT_CHON.Rows[i]["MA_SANPHAM_KH"];
                                dr["MA_SANPHAM"] = dt_PHIEU_YEUCCAU_CT_CHON.Rows[i]["MA_SANPHAM"];
                                dr["TEN_SANPHAM"] = dt_PHIEU_YEUCCAU_CT_CHON.Rows[i]["TEN_SANPHAM"];
                                dr["MA_DONVI_TINH"] = dt_PHIEU_YEUCCAU_CT_CHON.Rows[i]["MA_DONVI_TINH"];
                                
                                dr["MA_ITEM_TYPE"] = dt_PHIEU_YEUCCAU_CT_CHON.Rows[i]["MA_ITEM_TYPE"];
                                dr["QUYCACHDONGGOI"] = dt_PHIEU_YEUCCAU_CT_CHON.Rows[i]["QUYCACHDONGGOI"];
                                dr["SOLO"] = dt_PHIEU_YEUCCAU_CT_CHON.Rows[i]["SOLO"];
                                dr["HANDUNG"] = dt_PHIEU_YEUCCAU_CT_CHON.Rows[i]["HANDUNG"];
                                dr["SO_LUONG_PHIEU_YEU_CAU"] = dt_PHIEU_YEUCCAU_CT_CHON.Rows[i]["SO_LUONG"];
                                dr["SO_LUONG_TONG"] = dt_PHIEU_YEUCCAU_CT_CHON.Rows[i]["SO_LUONG"];
                                dr["DONGIA"] = dt_PHIEU_YEUCCAU_CT_CHON.Rows[i]["DONGIA"];
                                dr["THANHTIEN"] = dt_PHIEU_YEUCCAU_CT_CHON.Rows[i]["THANHTIEN"];
                                dt_PHIEU_CTIET.Rows.Add(dr);
                            }
                        }
                    }
                }
                if (dt_PHIEU_CTIET != null)
                {
                    this.iGridHelper.BindItemSource(dt_PHIEU_CTIET);
                }
                else
                {
                    grd.ItemsSource = null;
                }
            }
            catch (Exception ex)
            {
                UtilLog.WriteLogToDB(LogGroupName.PROGRAM, ex.Message, this.GetType().Name, this.btnChonPhieuYC.Tag.ToString());
                base.ShowMessage(MessageType.Error, ex.Message, ex);
            }
        }

        private void btnSave_Click(object sender, RoutedEventArgs e)
        {
            try
            {
                if (dt_PHIEU_CTIET.Rows.Count == 0)
                    return;
                for (int i = 0; i < dt_PHIEU_CTIET.Rows.Count; i++)
                {
                    if (dt_PHIEU_CTIET.Rows[i]["IS_NHAPNHIEULAN"].ToString() == "1")
                    {
                        this.iDataSource.Rows[0]["IS_NHAPNHIEULAN"] = "True";
                        break;
                    }
                }
                if (SetIsNull() == false)
                {
                    return;
                }
                for (int i = 0; i < dt_PHIEU_CTIET.Rows.Count; i++)
                {
                    if (ConstCommon.NVL_NUM_NT_NEW(dt_PHIEU_CTIET.Rows[i]["SO_LUONG_TONG"]) == 0)
                    {
                        base.ShowMessage(MessageType.Information, "[SỐ LƯỢNG TỔNG] " + Convert.ToString(UtilLanguage.ApplyLanguage()["lblNoteNULL"]));
                        return;
                    }
                    if (dt_PHIEU_CTIET.Rows[i]["MA_TINHTRANG_HANG"].ToString() == String.Empty)
                    {
                        base.ShowMessage(MessageType.Information, "Chưa chọn [TRẠNG THÁI HÀNG].");
                        return;
                    }
                    if (dt_PHIEU_CTIET.Rows[i]["VITRI"].ToString() == String.Empty)
                    {
                        base.ShowMessage(MessageType.Information, "Chưa chọn [VỊ TRÍ HÀNG].");
                        return;
                    }
                    if (dt_PHIEU_CTIET.Rows[i]["MA_TINHTRANG_CV"].ToString() == String.Empty)
                    {
                        base.ShowMessage(MessageType.Information, "Chưa chọn [TÌNH TRẠNG CV].");
                        return;
                    }
                }

                DataSet dsReturn = null;
                dsReturn = _IPHIEU_NHAP_XUAT_KHO.InsertKO_PHIEU_NHAPXUATKHO(iDataSource, dt_PHIEU_CTIET, CommonDataHelper.UserName, pN_OR_N);
                if ((dsReturn != null) && (dsReturn.Tables.Count == 2))
                {

                    foreach (DataColumn item in dsReturn.Tables[0].Columns)
                    {
                        if (this.iDataSource.Columns[item.ColumnName] != null)
                        {
                            this.iDataSource.Rows[0][item.ColumnName] = dsReturn.Tables[0].Rows[0][item.ColumnName];
                        }
                    }

                    dt_PHIEU_CTIET.Clear();
                    dt_PHIEU_CTIET = dsReturn.Tables[1].Copy();
                    if (dt_PHIEU_CTIET != null)
                    {
                        this.iGridHelper.BindItemSource(dt_PHIEU_CTIET);
                    }
                    else
                    {
                        grd.ItemsSource = null;
                    }

                    ToastMessage.ShowToastMessage(Convert.ToString(UtilLanguage.ApplyLanguage()["lblMessage"]), Convert.ToString(UtilLanguage.ApplyLanguage()["lblMessageSuccess"]), notificationService);
                    pPHIEU_XUATNHAP_KHO_ID = ConstCommon.NVL_NUM_LONG_NEW(this.iDataSource.Rows[0]["PHIEU_NHAPXUATKHO_ID"].ToString());
                    IsVisibleSoLuongYeuCau();
                }
                else
                {
                    base.ShowMessage(MessageType.Error, "Lưu không thành công");
                }

            }
            catch (Exception ex)
            {
                UtilLog.WriteLogToDB(LogGroupName.PROGRAM, ex.Message, this.GetType().Name, this.btnSave.Tag.ToString());
                base.ShowMessage(MessageType.Error, ex.Message, ex);
            }
        }

        private void btnThemmoi_Click(object sender, RoutedEventArgs e)
        {
            try
            {
                isSecondLoad = false;
                chkIS_NHAPNHIEULAN.IsChecked = false;
                txtID_PHIEU_YC.Text = String.Empty;
                this.iDataSource = this.TableSchemaDefineBingding();
                this.DataContext = this.iDataSource;
                grd.ItemsSource = null;
                if (dt_PHIEU_CTIET != null)
                {
                    dt_PHIEU_CTIET.Clear();
                }
                this.iDataSource.Rows[0]["TEN_KHO"] = ConstCommon.pTEN_KHO;
                this.iDataSource.Rows[0]["MA_DVIQLY"] = ConstCommon.DonViQuanLy;
                LoadComboBox();
            }
            catch (Exception ex)
            {
                UtilLog.WriteLogToDB(LogGroupName.PROGRAM, ex.Message, this.GetType().Name, this.btnSave.Tag.ToString());
                base.ShowMessage(MessageType.Error, ex.Message, ex);
            }
        }

        private void chkIS_NHAPNHIEULAN_Click(object sender, RoutedEventArgs e)
        {
            KiemTraNhapNhieuLan();
        }

        private void grdView_CellValueChanged(object sender, CellValueChangedEventArgs e)
        {
            try
            {
                int so_luong_quy_doi = 0;
                if (this.grd.GetFocusedRow() == null) return;
                DataRowView row = this.grd.GetFocusedRow() as DataRowView;
                if (ConstCommon.NVL_NUM_NT_NEW(row["SO_LUONG_TONG"]) != 0)
                    row["THANHTIEN"] = ConstCommon.NVL_NUM_DECIMAL_NEW(row["SO_LUONG_TONG"]) * ConstCommon.NVL_NUM_DECIMAL_NEW(row["DONGIA"]);
                if (e.Column.FieldName == "SO_LUONG_LE" || e.Column.FieldName == "SO_LUONG_TONG" || e.Column.FieldName == "SO_LUONG_THUNG")
                {
                    so_tong = ConstCommon.NVL_NUM_NT_NEW(row["SO_LUONG_TONG"]);
                    so_thung = ConstCommon.NVL_NUM_NT_NEW(row["SO_LUONG_THUNG"]);
                    so_le = ConstCommon.NVL_NUM_NT_NEW(row["SO_LUONG_LE"]);
                    if (ConstCommon.NVL_NUM_NT_NEW(row["SO_LUONG_TONG"]) != 0)
                        row["THANHTIEN"] = ConstCommon.NVL_NUM_DECIMAL_NEW(row["SO_LUONG_TONG"]) * ConstCommon.NVL_NUM_DECIMAL_NEW(row["DONGIA"]);
                    if(ConstCommon.NVL_NUM_NT_NEW(row["SOLUONG_QUYDOI"])> 0)
                    {
                       so_luong_quy_doi = ConstCommon.NVL_NUM_NT_NEW(row["SOLUONG_QUYDOI"]);
                       if(e.Column.FieldName == "SO_LUONG_TONG")
                       {
                            if((so_tong != 0 && so_thung != 0 && so_le != 0) || so_thung == 0 || so_le == 0 ||(so_thung == 0 && so_le == 0))
                            {
                                row["SO_LUONG_THUNG"] = so_tong / so_luong_quy_doi;
                                row["SO_LUONG_LE"] = so_tong % so_luong_quy_doi;
                                return;
                            }
                            if(so_tong == 0)
                            {
                                row["SO_LUONG_THUNG"] = 0;
                                row["SO_LUONG_LE"] = 0;
                                return;
                            }
                       }
                       if(e.Column.FieldName == "SO_LUONG_THUNG")
                       {
                            if (so_thung == 0)
                            {
                                row["SO_LUONG_LE"] = so_tong;
                                return;
                            }
                            if ((so_tong != 0 && so_thung != 0 && so_le != 0) || so_tong == 0 || so_tong != 0)
                            {
                                row["SO_LUONG_TONG"] = so_thung * so_luong_quy_doi + so_le;
                                return;
                            }
                       }
                       if(e.Column.FieldName == "SO_LUONG_LE")
                       {
                            if(so_tong != 0 && so_thung != 0 && so_le != 0)
                            {
                                if(so_le > so_luong_quy_doi)
                                {
                                    base.ShowMessage(MessageType.Information, "Bạn nhập quá [SỐ LƯỢNG QUY ĐỔI].");
                                    row["SO_LUONG_LE"] = so_tong - (so_thung * so_luong_quy_doi);
                                    return;
                                }
                                if(so_le == so_luong_quy_doi)
                                {
                                    row["SO_LUONG_THUNG"] = so_thung + (so_le / so_luong_quy_doi);
                                    row["SO_LUONG_LE"] = so_le % so_luong_quy_doi;
                                    row["SO_LUONG_TONG"] = so_thung * so_luong_quy_doi + so_le;
                                    return;
                                }
                                else
                                {
                                    row["SO_LUONG_TONG"] = so_thung * so_luong_quy_doi + so_le;
                                    return;
                                }
                            }
                            if(so_thung == 0)
                            {
                                row["SO_LUONG_TONG"] = so_le;
                                row["SO_LUONG_THUNG"] = so_thung + (so_le / so_luong_quy_doi);
                                row["SO_LUONG_LE"] = so_le % so_luong_quy_doi;
                                return;
                            }
                            if(so_tong == 0)
                            {
                                if(so_le >= so_luong_quy_doi)
                                {
                                    row["SO_LUONG_THUNG"] = so_thung + (so_le / so_luong_quy_doi);
                                    row["SO_LUONG_LE"] = so_le % so_luong_quy_doi;
                                    row["SO_LUONG_TONG"] = so_thung * so_luong_quy_doi + so_le;
                                    return;
                                }
                                else
                                {
                                    row["SO_LUONG_TONG"] = so_thung * so_luong_quy_doi + so_le;
                                    return;
                                }
                            }
                            if(so_le == 0)
                            {
                                row["SO_LUONG_TONG"] = so_thung * so_luong_quy_doi;
                                return;
                            }
                       }
                    }
                    else
                    {
                        row["SO_LUONG_THUNG"] = 0;
                        row["SO_LUONG_LE"] = 0;
                        return;
                    }
                    if (isSecondLoad == true)
                    {
                        if (ConstCommon.NVL_NUM_NT_NEW(row["SO_LUONG_PHIEU_YEU_CAU"]) == 0)
                        {
                            row["IS_NHAPNHIEULAN"] = 0;
                            chkIS_NHAPNHIEULAN.IsChecked = false; return;
                        }
                        if (ConstCommon.NVL_NUM_NT_NEW(row["SO_LUONG_PHIEU_YEU_CAU"]) != 0 && ConstCommon.NVL_NUM_NT_NEW(row["SO_LUONG_PHIEU_YEU_CAU"]) <= ConstCommon.NVL_NUM_NT_NEW(row["SO_LUONG_TONG"]))
                        {
                            row["IS_NHAPNHIEULAN"] = 0;
                            chkIS_NHAPNHIEULAN.IsChecked = false; return;
                        }
                        else
                        {
                            row["IS_NHAPNHIEULAN"] = 1;
                            chkIS_NHAPNHIEULAN.IsChecked = true;
                            return;
                        }
                    }
                    else
                        return;
                }
                else
                {
                    if(isSecondLoad == true)
                    {
                        if (ConstCommon.NVL_NUM_NT_NEW(row["SO_LUONG_PHIEU_YEU_CAU"]) == 0)
                        {
                            row["IS_NHAPNHIEULAN"] = 0; return;
                        }
                        if (ConstCommon.NVL_NUM_NT_NEW(row["SO_LUONG_PHIEU_YEU_CAU"]) != 0 && ConstCommon.NVL_NUM_NT_NEW(row["SO_LUONG_PHIEU_YEU_CAU"]) <= ConstCommon.NVL_NUM_NT_NEW(row["SO_LUONG_TONG"]))
                        {
                            row["IS_NHAPNHIEULAN"] = 0; return;
                        }
                        else
                        {
                            row["IS_NHAPNHIEULAN"] = 1; return;
                        }
                    }
                    else
                        return;
                }
            }
            catch (Exception ex)
            {
                UtilLog.WriteLogToDB(LogGroupName.PROGRAM, ex.Message, this.GetType().Name, this.btnThemmoi.Tag.ToString());
                base.ShowMessage(MessageType.Error, ex.Message, ex);
            }
        }

        private void txtNGAY_CHUNGTU_EditValueChanged(object sender, EditValueChangedEventArgs e)
        {
            try
            {
                txtNGAY_CHUNGTU.EditValue = DateTime.ParseExact(txtNGAY_CHUNGTU.EditValue.ToString().Substring(0, 10), "dd/MM/yyyy", CultureInfo.InvariantCulture);
            }
            catch
            {

            }
        }

        private void grdView_FocusedRowChanged(object sender, FocusedRowChangedEventArgs e)
        {
            try
            {

                if (this.grd.GetFocusedRow() == null) return;
                int vitri = this.grdView.FocusedRowHandle;
                if (vitri < 0) return;

                if(isSecondLoad == true)
                {
                    if (ConstCommon.NVL_NUM_LONG_NEW(dt_PHIEU_CTIET.Rows[vitri]["SO_LUONG_PHIEU_YEU_CAU"].ToString()) > 0)
                    {
                        foreach (Column col in iGridHelper.GetColumns)
                        {
                            if (col.Name == "KHO_KHUVUC_ID".ToString())
                            {
                                iGridHelper.GetColumnByName(col.Name).AllowEditing = DevExpress.Utils.DefaultBoolean.False;
                            }
                        }
                    }
                    else
                    {
                        foreach (Column col in iGridHelper.GetColumns)
                        {
                            if (col.Name == "KHO_KHUVUC_ID".ToString())
                            {
                                iGridHelper.GetColumnByName(col.Name).AllowEditing = DevExpress.Utils.DefaultBoolean.True;
                            }
                        }
                    }
                }
                //begin hoapd them vao
                if (ConstCommon.NVL_NUM_LONG_NEW(dt_PHIEU_CTIET.Rows[vitri]["SOLUONG_QUYDOI"].ToString()) == 0)
                {
                    //neu la dao tao

                    foreach (Column col in iGridHelper.GetColumns)
                    {
                        if (col.Name == "SO_LUONG_THUNG".ToString())
                        {
                            iGridHelper.GetColumnByName(col.Name).AllowEditing = DevExpress.Utils.DefaultBoolean.False;
                        }
                        if (col.Name == "SO_LUONG_LE".ToString())
                        {
                            iGridHelper.GetColumnByName(col.Name).AllowEditing = DevExpress.Utils.DefaultBoolean.False;
                        }
                    }

                    //end hoapd them vao
                }
                else
                {
                    foreach (Column col in iGridHelper.GetColumns)
                    {
                        if (col.Name == "SO_LUONG_THUNG".ToString())
                        {
                            iGridHelper.GetColumnByName(col.Name).AllowEditing = DevExpress.Utils.DefaultBoolean.True;
                        }
                        if (col.Name == "SO_LUONG_LE".ToString())
                        {
                            iGridHelper.GetColumnByName(col.Name).AllowEditing = DevExpress.Utils.DefaultBoolean.True;
                        }

                    }
                }

            }
            catch (Exception ex)
            {
                UtilLog.WriteLogToDB(LogGroupName.PROGRAM, ex.Message, this.GetType().Name, this.btnNhapHangNhieuLan.Tag.ToString());
                base.ShowMessage(MessageType.Error, ex.Message, ex);
            }

        }

        private void txtNGAYLAP_EditValueChanged(object sender, EditValueChangedEventArgs e)
        {
            try
            {
                txtNGAYLAP.EditValue = DateTime.ParseExact(txtNGAYLAP.EditValue.ToString().Substring(0, 10), "dd/MM/yyyy", CultureInfo.InvariantCulture);
            }
            catch
            {

            }
        }
        private void btnNhapHangNhieuLan_Click(object sender, RoutedEventArgs e)
        {
            try
            {
                isSecondLoad = false;
                object xReturn = UIAgent.GetUIPopupDialog(this, null, this.GetType().ToString(), "DSofT.Warehouse.UI", "frm_NhapKho_popup_nhap_hang_nhieu_lan", null);
                LoadData();
            }
            catch (Exception ex)
            {
                UtilLog.WriteLogToDB(LogGroupName.PROGRAM, ex.Message, this.GetType().Name, this.btnNhapHangNhieuLan.Tag.ToString());
                base.ShowMessage(MessageType.Error, ex.Message, ex);
            }
        }
        #endregion
    }
}