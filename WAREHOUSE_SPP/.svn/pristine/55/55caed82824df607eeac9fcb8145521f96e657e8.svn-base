using DevExpress.Xpf.Grid;
using DSofT.Warehouse.Business;
using DSofT.Warehouse.Log.UtilHelper;
using DSofT.Warehouse.Resources;
using DSofT.Framework.UIControl;
using DSofT.Framework.UICore;
using System;
using System.Collections.Generic;
using System.Data;
using System.Linq;
using System.Windows;
using System.Windows.Controls;
using System.Windows.Data;
using System.Windows.Input;

namespace DSofT.Warehouse.UI
{
    /// <summary>
    /// Interaction logic for popupMaterial.xaml
    /// </summary>
    public partial class popupFood : PopupBase
    {
        DataTable iDataSource = null;
        DataTable iGridDataSource = null;
        IMaterialBussiness _materialBussiness;
        IFoodTypesBussiness _foodTypesBussiness;
        IFoodBussiness _foodBussiness;
        DataRow iRowSelGb = null;
        GridHelper grdListMaterial = null;
        public popupFood()
        {
            InitializeComponent();
            _materialBussiness = new MaterialBussiness(string.Empty);
            _foodTypesBussiness = new FoodTypesBussiness(string.Empty);
            _foodBussiness = new FoodBussiness(string.Empty);
            InitGridControl_grdMaterial();
            this.iDataSource = this.TableSchemaDefineBingding();
            this.DataContext = this.iDataSource;
        }

        public override void OnPopupShown()
        {
            if (this.Parameter != null && this.Parameter.Count() > 0)
            {
                iRowSelGb = this.Parameter[0] as DataRow;
                DispalayRequest();
            }
            LoadData();
            GetMaterialName();
        }
        /// <summary>
        /// 
        /// </summary>
        public void DispalayRequest()
        {
            try
            {
                foreach (DataColumn item in this.iRowSelGb.Table.Columns)
                {
                    if (this.iDataSource.Columns[item.ColumnName] != null)
                    {
                        this.iDataSource.Rows[0][item.ColumnName] = iRowSelGb[item.ColumnName];
                    }
                }
            }
            catch (Exception ex)
            {
                UtilLog.WriteLogToDB(LogGroupName.PROGRAM, ex.Message, this.GetType().Name, "DispalayRequest()");
                base.ShowMessage(MessageType.Error, ex.Message, ex);
            }
            finally
            {
                Mouse.OverrideCursor = Cursors.Arrow;
            }
        }
        /// <summary>
        /// TableSchemaDefineBingding
        /// </summary>
        /// <returns></returns>
        private DataTable TableSchemaDefineBingding()
        {
            DataTable xDt = null;
            try
            {
                Dictionary<string, Type> xDicUser = new Dictionary<string, Type>();
                xDicUser.Add("FoodCode", typeof(string));
                xDicUser.Add("FoodName", typeof(string));
                xDicUser.Add("FoodTypeId", typeof(decimal));
                xDicUser.Add("Remark", typeof(string));
                xDicUser.Add("Id", typeof(decimal));
                xDicUser.Add("MaterialCode", typeof(string));
                xDicUser.Add("MaterialName", typeof(string));
                xDt = TableUtil.ConvertDictionaryToTable(xDicUser, true, false);

            }
            catch (Exception ex)
            {
                UtilLog.WriteLogToDB(LogGroupName.PROGRAM, ex.Message, this.GetType().Name, "TableSchemaDefineBingding()");
                base.ShowMessage(MessageType.Error, ex.Message, ex);
            }
            return xDt;
        }
        /// <summary>
        /// LoadData
        /// </summary>
        private void LoadData()
        {
            try
            {
                DataTable dtFoodType = _foodTypesBussiness.GetAllFoodTypes();
                ComboBoxUtil.SetComboBoxEdit(this.cboFoodType, "FoodTypesName", "Id", dtFoodType, SelectionTypeEnum.Native);
                ComboBoxUtil.InsertItem(cboFoodType, "*", "0", 0);
                DataTable dtMaterial = _materialBussiness.GetAllMaterialFood(string.IsNullOrWhiteSpace(this.iDataSource.Rows[0]["Id"].ToString()) == true ? "0" : this.iDataSource.Rows[0]["Id"].ToString());
                if (dtMaterial != null && dtMaterial.Rows.Count > 0)
                {
                    this.iGridDataSource = dtMaterial;
                    grdListMaterial.BindItemSource(this.iGridDataSource);
                }
            }
            catch (Exception ex)
            {
                UtilLog.WriteLogToDB(LogGroupName.PROGRAM, ex.Message, this.GetType().Name, "LoadData()");
                base.ShowMessage(MessageType.Error, ex.Message, ex);
            }
        }

        private void InitGridControl_grdMaterial()
        {
            grdListMaterial = new GridHelper(grd_Material, tblMaterial, false);
            Column xColums = new Column();
            xColums = new Column("STATUS", "");
            xColums.ColumnType = ColumnControl.Checkbox;
            xColums.Width = 20;
            xColums.Visible = true;
            xColums.HeaderStyle = ColumnHeaderStyle.CheckBox;
            xColums.HorizontalContentAlignment = DevExpress.Xpf.Editors.Settings.EditSettingsHorizontalAlignment.Center;
            xColums.AllowEditing = DevExpress.Utils.DefaultBoolean.True;
            xColums.FieldName = "STATUS";
            xColums.Binding = new Binding("STATUS") { Converter = new ConverterStringBool(), ConverterParameter = "1:0", Mode = BindingMode.TwoWay};
            this.grdListMaterial.Add(xColums);

            xColums = new Column("ID", "ID");
            xColums.Width = 20;
            xColums.Visible = false;
            this.grdListMaterial.Add(xColums);

            xColums = new Column("MaterialCode", Convert.ToString(UtilLanguage.ApplyLanguage()["frmMaterial_MaterialCode"]));
            xColums.Width = 100;
            xColums.Visible = true;
            xColums.HorizontalContentAlignment = DevExpress.Xpf.Editors.Settings.EditSettingsHorizontalAlignment.Left;
            xColums.AllowEditing = DevExpress.Utils.DefaultBoolean.False;
            this.grdListMaterial.Add(xColums);

            xColums = new Column("MaterialName", Convert.ToString(UtilLanguage.ApplyLanguage()["frmMaterial_MaterialName"]));
            xColums.Width = 150;
            xColums.Visible = true;
            xColums.HorizontalContentAlignment = DevExpress.Xpf.Editors.Settings.EditSettingsHorizontalAlignment.Left;
            xColums.AllowEditing = DevExpress.Utils.DefaultBoolean.False;
            this.grdListMaterial.Add(xColums);

            this.grdListMaterial.Initialize();
            tblMaterial.AutoWidth = true;
        }

        /// <summary>
        /// btnNew_Click
        /// </summary>
        /// <param name="sender"></param>
        /// <param name="e"></param>
        private void btnNew_Click(object sender, RoutedEventArgs e)
        {
            this.iDataSource = this.TableSchemaDefineBingding();
            LoadData();
            this.DataContext = this.iDataSource;
        }

        /// <summary>
        /// btnSave_Click
        /// </summary>
        /// <param name="sender"></param>
        /// <param name="e"></param>
        private void btnSave_Click(object sender, RoutedEventArgs e)
        {
            try
            {
                DataRow[] drRow = this.iGridDataSource.Select("STATUS=1");
                if (drRow.Length > 0)
                {
                    DataTable dtFoodDetail = drRow.CopyToDataTable();
                    bool result = _foodBussiness.InsertOrUpdateFood(this.iDataSource.Copy(), dtFoodDetail);
                    if (!result)
                    {
                        base.ShowMessage(MessageType.Information, Convert.ToString(UtilLanguage.ApplyLanguage()["lblMessageFailed"]));
                        return;
                    }
                    else
                    {
                        ToastMessage.ShowToastMessage(Convert.ToString(UtilLanguage.ApplyLanguage()["lblMessage"]), Convert.ToString(UtilLanguage.ApplyLanguage()["lblMessageSuccess"]), notificationService);
                        return;
                    }
                }
                else
                {
                    base.ShowMessage(MessageType.Information, Convert.ToString(UtilLanguage.ApplyLanguage()["frmFoodMenu_MessageMetarial"]));
                    return;
                }
            }
            catch (Exception ex)
            {
                UtilLog.WriteLogToDB(LogGroupName.PROGRAM, ex.Message, this.GetType().Name, this.btnSave.Tag.ToString());
                base.ShowMessage(MessageType.Error, ex.Message, ex);
            }
        }

        private void btnClose_Click(object sender, RoutedEventArgs e)
        {
            this.Close();
        }

        private void btnDelete_Click(object sender, RoutedEventArgs e)
        {
            try
            {
                if (!base.ShowMessage(MessageType.OkCancel, Convert.ToString(UtilLanguage.ApplyLanguage()["lblcomfrimDelete"])))
                    return;
                bool result = _foodBussiness.DeleteFood(this.iDataSource.Copy());
                if (!result)
                {
                    base.ShowMessage(MessageType.Information, Convert.ToString(UtilLanguage.ApplyLanguage()["tblKhongThanhCong"]));
                    return;
                }
                else
                {
                    ToastMessage.ShowToastMessage(Convert.ToString(UtilLanguage.ApplyLanguage()["tblThongBao"]), Convert.ToString(UtilLanguage.ApplyLanguage()["tblThanhCong"]), notificationService);
                }
            }
            catch (Exception ex)
            {
                UtilLog.WriteLogToDB(LogGroupName.PROGRAM, ex.Message, this.GetType().Name, this.btnDelete.Tag.ToString());
                base.ShowMessage(MessageType.Error, ex.Message, ex);
            }
        }
        /// <summary>
        /// tblMaterial_CellValueChanging
        /// </summary>
        /// <param name="sender"></param>
        /// <param name="e"></param>
        private void tblMaterial_CellValueChanging(object sender, CellValueChangedEventArgs e)
        {
            GetMaterialName();
        }
        /// <summary>
        /// GetMaterialName()
        /// </summary>
        private void GetMaterialName()
        {
            try
            {
                string strMetarialName = string.Empty;
                this.tblMaterial.CommitEditing();
                this.iGridDataSource.AcceptChanges();
                DataRow[] drRow = this.iGridDataSource.Select("STATUS=1");
                if (drRow.Length > 0)
                {
                    foreach (DataRow dr in drRow)
                    {
                        strMetarialName = strMetarialName + ", " + dr["MaterialName"].ToString();
                    }
                    if (strMetarialName.Length > 0)
                    {
                        strMetarialName = strMetarialName.Substring(1, strMetarialName.Length - 1);
                    }
                    lblListMaterial.Text = string.Format("Các nguyên liệu được chọn: {0}", strMetarialName);
                }
                else
                {
                    lblListMaterial.Text = string.Format("Các nguyên liệu được chọn: {0}", strMetarialName);
                }

            }
            catch (Exception ex)
            {
                UtilLog.WriteLogToDB(LogGroupName.PROGRAM, ex.Message, this.GetType().Name, "grdView_CellValueChanging()");
                base.ShowMessage(MessageType.Error, ex.Message, ex);
            }
        }

    }

}
