using System;
using System.Collections.Generic;
using System.Linq;
using System.Data;
using System.Windows;
using System.Windows.Input;
using DSofT.Warehouse.Business;
using DSofT.Warehouse.Resources;
using DSofT.Warehouse.Log.UtilHelper;
using DSofT.Framework.UICore;
using DSofT.Framework.UIControl;

namespace DSofT.Warehouse.UI
{
    /// <summary>
    /// Interaction logic for frm_LoaiKho
    /// </summary>
    public partial class frm_DanhMucLoaiKho_Popup : PopupBase
    {
        DataTable iDataSource = null;
        GridHelper iGridHelper = null;
        DataTable iGridDataSource = null;
        IDM_LOAIKHOBussiness _DM_LOAI_KHOBussiness;
        DataRow iRowSelGb = null;
        public frm_DanhMucLoaiKho_Popup()
        {
            InitializeComponent();
            _DM_LOAI_KHOBussiness = new DM_LOAIKHOBussiness(String.Empty);
            this.iDataSource = this.TableSchemaDefineBingding();
            this.DataContext = this.iDataSource;
            loadCheckBox();
        }


        public override void OnPopupShown()
        {
            if (this.Parameter != null && this.Parameter.Count() > 0)
            {
                iRowSelGb = this.Parameter[0] as DataRow;
                DispalayRequest();
            }
        }

        public void DispalayRequest()
        {
            try
            {
                foreach (DataColumn item in this.iRowSelGb.Table.Columns)
                {
                    if (this.iDataSource.Columns[item.ColumnName] != null)
                    {
                        this.iDataSource.Rows[0][item.ColumnName] = iRowSelGb[item.ColumnName];
                    }
                }
            }
            catch (Exception ex)
            {
                UtilLog.WriteLogToDB(LogGroupName.PROGRAM, ex.Message, this.GetType().Name, "DispalayRequest()");
                base.ShowMessage(MessageType.Error, ex.Message, ex);
            }
            finally
            {
                Mouse.OverrideCursor = Cursors.Arrow;
            }
        }

        /// <summary>
        /// Lưu dữ liệu vào db
        /// </summary>
        /// <param name="sender"></param>
        /// <param name="e"></param>
        private void btnSave_Click(object sender, RoutedEventArgs e)
        {
            try
            {
                if(kiemTraNull() == 1)
                {
                    base.ShowMessage(MessageType.Information, Convert.ToString(UtilLanguage.ApplyLanguage()["lblNull"]));
                    txtLoaiKho.Focus();
                }
                else
                {
                    if(!kiemTraTonTai(txtLoaiKho.Text))
                    {
                        txtLoaiKho.Focus();
                        return;
                    }
                    else
                    {
                        KiemTraCheckBox();
                        bool result = _DM_LOAI_KHOBussiness.InsertOrUpdateDM_LOAIKHO(this.iDataSource.Copy());
                        if (!result)
                        {
                            base.ShowMessage(MessageType.Information, Convert.ToString(UtilLanguage.ApplyLanguage()["lblMessageFailed"]));
                            return;
                        }
                        else
                        {
                            ToastMessage.ShowToastMessage(Convert.ToString(UtilLanguage.ApplyLanguage()["lblMessage"]), Convert.ToString(UtilLanguage.ApplyLanguage()["lblMessageSuccess"]), notificationService);
                            return;

                        }
                    }
                }    
            }
            catch (Exception ex)
            {
                UtilLog.WriteLogToDB(LogGroupName.PROGRAM, ex.Message, this.GetType().Name, this.btnSave.Tag.ToString());
                base.ShowMessage(MessageType.Error, ex.Message, ex);
            }
        }

        private DataTable TableSchemaDefineBingding()
        {
            DataTable xDt = null;
            try
            {
                Dictionary<string, Type> xDicUser = new Dictionary<string, Type>();
                xDicUser.Add("MA_DVIQLY", typeof(string));
                xDicUser.Add("LOAIKHO_ID", typeof(decimal));
                xDicUser.Add("TEN_LOAIKHO", typeof(string));
                xDicUser.Add("GHI_CHU", typeof(string));
                xDicUser.Add("TINH_TRANG", typeof(Int16));
                xDicUser.Add("RowVersion", typeof(long));
                xDicUser.Add("IsDelete", typeof(bool));
                xDicUser.Add("CreateBy", typeof(string));
                xDicUser.Add("CreateDate", typeof(DateTime));

                xDt = TableUtil.ConvertDictionaryToTable(xDicUser, true, false);
            }
            catch (Exception ex)
            {
                UtilLog.WriteLogToDB(LogGroupName.PROGRAM, ex.Message, this.GetType().Name, "TableSchemaDefineBingding()");
                base.ShowMessage(MessageType.Error, ex.Message, ex);
            }
            return xDt;
        }

        /// <summary>
        /// Đóng Popup
        /// </summary>
        /// <param name="sender"></param>
        /// <param name="e"></param>
        private void btnClose_Click(object sender, RoutedEventArgs e)
        {
            this.Close();
        }

        public void KiemTraCheckBox()
        {
            try
            {
                if (chkTinhTrang.IsChecked == true)
                {
                    this.iDataSource.Rows[0]["TINH_TRANG"] = 1;
                }
                else
                {
                    this.iDataSource.Rows[0]["TINH_TRANG"] = 0;
                }
            }
            catch (Exception ex)
            {

                throw ex;
            }

        }

        public void loadCheckBox()
        {
            try
            {
                if (this.iDataSource.Rows[0]["TINH_TRANG"].ToString() == "1")
                {
                    chkTinhTrang.IsChecked = false;
                }
                else
                {
                    chkTinhTrang.IsChecked = true;
                }
            }
            catch (Exception ex)
            {

                throw ex;
            }
        }


        public int kiemTraNull()
        {
            try
            {
                if(txtLoaiKho.Text == string.Empty)
                {
                    return 1;
                }
                return 0;
            }
            catch (Exception ex)
            {

                throw ex;
            }
        }


        /// <summary>
        /// kiem tra ton tai loai kho
        /// </summary>
        /// <param name="tenLoaiKho"></param>
        /// <returns></returns>
        public bool kiemTraTonTai(string tenLoaiKho)
        {
            try
            {
                DataTable dt = _DM_LOAI_KHOBussiness.GetListDM_LOAIKHO(ConstCommon.DonViQuanLy);
                for (int i = 0; i < iDataSource.Rows.Count; i++)
                {
                    foreach (DataRow item in dt.Rows)
                    {
                        if (string.Equals(tenLoaiKho.ToString(), item["TEN_LOAIKHO"].ToString()))
                        {
                            base.ShowMessage(MessageType.Information, "Tên loại kho:  " + this.iDataSource.Rows[0]["TEN_LOAIKHO"].ToString() + " bị trùng. Vui lòng chọn tên khác!");
                            return false;
                        }
                    }
                }
                return true;
            }
            catch (Exception ex)
            {

                throw ex;
            }
       
        }
    }
}



