using DevExpress.Xpf.Grid;
using DevExpress.XtraGrid;
using System;
using System.Collections.Generic;
using System.Data;
using System.Net;
using System.Text.RegularExpressions;
using System.Windows.Controls;
using System.Windows.Input;

public static class ConstCommon
{
    public const string PAGE_404 = "_404";
    public const string PAGE_HOME = "Default";
    public const string PAGE_SERVER_OVERLOAD = "_ServerOverload";
    public const string PAGE_LOGIN = "/dang-nhap";
    public static string DonViQuanLy = "PE0800";
    public static long pKHO_ID = 0;
    public static string pTEN_KHO = "";

    public static long NVL_NUM_LONG_NEW(object str)
    {
        if ((str != System.DBNull.Value) && (str != null))
        {
            if (str.ToString().Trim().Equals("") == false)
            {
                return long.Parse(str.ToString());
            }
            else
            {
                return 0;
            }
        }
        else
        {
            return 0;
        }
    }



    static public bool IsValidInt(string val)
    {
        return Regex.IsMatch(val, @"^[0-9]\d*\.?[0]*$");
    }

    static public bool IsValidDate(string val)
    {
        Regex r = new Regex(@"\d{2}/\d{2}/\d{4}");
        return r.IsMatch(val);

    }

    public static string getTEN_MAYTRAM()
    {
        try
        {
            String strHostName = Dns.GetHostName();
            return strHostName;
        }
        catch
        {
            return "";
        }
    }



    public static string getIP_MAYTRAM()
    {
        try
        {
            String listIP = "";
            String strHostName = Dns.GetHostName();
            IPHostEntry iphostentry = Dns.GetHostByName(strHostName);
            // Enumerate IP addresses
            foreach (IPAddress ipaddress in iphostentry.AddressList)
            {
                listIP = listIP + "," + ipaddress.ToString();
            }
            return listIP;
        }
        catch
        {
            return "";
        }
    }

    public static void setAutoFilterConditionGrid(GridControl grd)
    {
        try
        {
            for (int i = 0; i < grd.Columns.Count; i++)
            {
                grd.Columns[i].ColumnFilterMode = DevExpress.Xpf.Grid.ColumnFilterMode.DisplayText;
                grd.Columns[i].AutoFilterCondition = AutoFilterCondition.Contains;

            }

        }
        catch
        {

        }

    }
    public static void mousebusy(Control ct)
    {

        Mouse.OverrideCursor = Cursors.Wait;
    }

    public static void mousefree(Control ct)
    {
        Mouse.OverrideCursor = Cursors.Arrow;
    }

    public static double roundNum(double num, int place)
    {
        double num1 = (num + 1E-10) * Math.Pow(10.0, (double)place);
        return (double)Math.Sign(num1) * Math.Abs(Math.Floor(num1 + 0.5)) / Math.Pow(10.0, (double)place);
    }

    public static string So_chu(double gNum)
    {
        if (gNum == 0.0)
            return "Không đồng";
        string str1 = "";
        string tach3 = "";
        string str2 = "";
        double num1 = Math.Round(gNum, 0);
        string str3 = Convert.ToString(num1);
        int int32 = Convert.ToInt32(str3.Length / 3);
        int startIndex = str3.Length - int32 * 3;
        string str4 = "[+]";
        if (gNum < 0.0)
            str4 = "[-]";
        string str5 = "";
        if (startIndex.Equals((object)1))
            tach3 = "00" + Convert.ToString(num1.ToString().Trim().Substring(0, 1)).Trim();
        if (startIndex.Equals((object)2))
            tach3 = "0" + Convert.ToString(num1.ToString().Trim().Substring(0, 2)).Trim();
        if (startIndex.Equals((object)0))
            tach3 = "000";
        if (num1.ToString().Length > 2)
            str2 = Convert.ToString(num1.ToString().Trim().Substring(startIndex, num1.ToString().Length - startIndex)).Trim();
        int num2 = int32 + 1;
        if (startIndex > 0)
            str1 = Tach(tach3).ToString().Trim() + " " + Donvi(num2.ToString().Trim());
        int num3 = int32;
        int num4 = int32;
        int num5 = 1;
        while (num3 > 0)
        {
            string str6 = str2.Trim().Substring(0, 3).Trim();
            string str7 = str6;
            str1 = str1.Trim() + " " + Tach(str6.Trim()).Trim();
            int num6 = num4 + 1 - num5;
            if (!str7.Equals("000"))
                str1 = str1.Trim() + " " + Donvi(num6.ToString().Trim()).Trim();
            str2 = str2.Trim().Substring(3, str2.Trim().Length - 3);
            --num3;
            ++num5;
        }
        if (str1.Trim().Substring(0, 1).Equals("k"))
            str1 = str1.Trim().Substring(10, str1.Trim().Length - 10).Trim();
        if (str1.Trim().Substring(0, 1).Equals("l"))
            str1 = str1.Trim().Substring(2, str1.Trim().Length - 2).Trim();
        if (str1.Trim().Length > 0)
            str1 = str5.Trim() + " " + str1.Trim().Substring(0, 1).Trim().ToUpper() + str1.Trim().Substring(1, str1.Trim().Length - 1).Trim() + " đồng chẵn.";
        return str1.ToString().Trim();
    }

    private static string Tach(string tach3)
    {
        string str1 = "";
        if (tach3.Equals("000"))
            return "";
        if (tach3.Length == 3)
        {
            string str2 = tach3.Trim().Substring(0, 1).ToString().Trim();
            string str3 = tach3.Trim().Substring(1, 1).ToString().Trim();
            string str4 = tach3.Trim().Substring(2, 1).ToString().Trim();
            if (str2.Equals("0") && str3.Equals("0"))
                str1 = " không trăm lẻ " + Chu(str4.ToString().Trim()) + " ";
            if (!str2.Equals("0") && str3.Equals("0") && str4.Equals("0"))
                str1 = Chu(str2.ToString().Trim()).Trim() + " trăm ";
            if (!str2.Equals("0") && str3.Equals("0") && !str4.Equals("0"))
                str1 = Chu(str2.ToString().Trim()).Trim() + " trăm lẻ " + Chu(str4.Trim()).Trim() + " ";
            if (str2.Equals("0") && Convert.ToInt32(str3) > 1 && (Convert.ToInt32(str4) > 0 && !str4.Equals("5")))
                str1 = " không trăm " + Chu(str3.Trim()).Trim() + " mươi " + Chu(str4.Trim()).Trim() + " ";
            if (str2.Equals("0") && Convert.ToInt32(str3) > 1 && str4.Equals("0"))
                str1 = " không trăm " + Chu(str3.Trim()).Trim() + " mươi ";
            if (str2.Equals("0") && Convert.ToInt32(str3) > 1 && str4.Equals("5"))
                str1 = " không trăm " + Chu(str3.Trim()).Trim() + " mươi lăm ";
            if (str2.Equals("0") && str3.Equals("1") && (Convert.ToInt32(str4) > 0 && !str4.Equals("5")))
                str1 = " không trăm mười " + Chu(str4.Trim()).Trim() + " ";
            if (str2.Equals("0") && str3.Equals("1") && str4.Equals("0"))
                str1 = " không trăm mười ";
            if (str2.Equals("0") && str3.Equals("1") && str4.Equals("5"))
                str1 = " không trăm mười lăm ";
            if (Convert.ToInt32(str2) > 0 && Convert.ToInt32(str3) > 1 && (Convert.ToInt32(str4) > 0 && !str4.Equals("5")))
                str1 = Chu(str2.Trim()).Trim() + " trăm " + Chu(str3.Trim()).Trim() + " mươi " + Chu(str4.Trim()).Trim() + " ";
            if (Convert.ToInt32(str2) > 0 && Convert.ToInt32(str3) > 1 && str4.Equals("0"))
                str1 = Chu(str2.Trim()).Trim() + " trăm " + Chu(str3.Trim()).Trim() + " mươi ";
            if (Convert.ToInt32(str2) > 0 && Convert.ToInt32(str3) > 1 && str4.Equals("5"))
                str1 = Chu(str2.Trim()).Trim() + " trăm " + Chu(str3.Trim()).Trim() + " mươi lăm ";
            if (Convert.ToInt32(str2) > 0 && str3.Equals("1") && (Convert.ToInt32(str4) > 0 && !str4.Equals("5")))
                str1 = Chu(str2.Trim()).Trim() + " trăm mười " + Chu(str4.Trim()).Trim() + " ";
            if (Convert.ToInt32(str2) > 0 && str3.Equals("1") && str4.Equals("0"))
                str1 = Chu(str2.Trim()).Trim() + " trăm mười ";
            if (Convert.ToInt32(str2) > 0 && str3.Equals("1") && str4.Equals("5"))
                str1 = Chu(str2.Trim()).Trim() + " trăm mười lăm ";
        }
        return str1;
    }


    private static string Chu(string gNumber)
    {
        string str = "";
        switch (gNumber)
        {
            case "0":
                str = "không";
                break;
            case "1":
                str = "một";
                break;
            case "2":
                str = "hai";
                break;
            case "3":
                str = "ba";
                break;
            case "4":
                str = "bốn";
                break;
            case "5":
                str = "năm";
                break;
            case "6":
                str = "sáu";
                break;
            case "7":
                str = "bảy";
                break;
            case "8":
                str = "tám";
                break;
            case "9":
                str = "chín";
                break;
        }
        return str;
    }

    private static string Donvi(string so)
    {
        string str = "";
        if (so.Equals("1"))
            str = "";
        if (so.Equals("2"))
            str = "nghìn";
        if (so.Equals("3"))
            str = "triệu";
        if (so.Equals("4"))
            str = "tỷ";
        if (so.Equals("5"))
            str = "nghìn tỷ";
        if (so.Equals("6"))
            str = "triệu tỷ";
        if (so.Equals("7"))
            str = "tỷ tỷ";
        return str;
    }
    public static string So_tien_doi_ra_chu(double So_tien)
    {
        return So_chu(So_tien);
    }


    private static int checkRowExistsTable(DataTable dt, DataRow row)
    {
        int num = 0;
        foreach (DataRow row1 in dt.Rows)
        {
            if (checkCampareRow(dt, row, row1) == 0)
            {
                ++num;
                break;
            }
        }
        return num == 0 ? 0 : 1;
    }

    private static int checkCampareRow(DataTable dt, DataRow row1, DataRow row2)
    {
        int num = 0;
        foreach (DataColumn column in dt.Columns)
        {
            if (row1[column.ColumnName].ToString().Trim() != row2[column.ColumnName].ToString().Trim())
            {
                ++num;
                break;
            }
        }
        return num == 0 ? 0 : 1;
    }





    public static bool check_String_Unicode(string str)
    {
        char[] varChar = str.ToCharArray();
        int i = 0;
        while (i < varChar.Length &&
            ((Convert.ToInt32(varChar[i]) >= 97 && Convert.ToInt32(varChar[i]) <= 122) || (Convert.ToInt32(varChar[i]) >= 65 && Convert.ToInt32(varChar[i]) <= 90)
            || (Convert.ToInt32(varChar[i]) >= 48 && Convert.ToInt32(varChar[i]) <= 57)))
        {
            i++;
        }
        if (i < varChar.Length)
        {
            return false;
        }
        return true;
    }





    public static double NVL_NUM_DOUBLE_NEW(object str)
    {
        if ((str != System.DBNull.Value) && (str != null))
        {
            if (str.ToString().Trim().Equals("") == false)
            {
                return double.Parse(str.ToString());
            }
            else
            {
                return 0;
            }
        }
        else
        {
            return 0;
        }
    }


    public static decimal NVL_NUM_DECIMAL_NEW(object str)
    {
        if ((str != System.DBNull.Value) && (str != null))
        {
            if (str.ToString().Trim().Equals("") == false)
            {
                return decimal.Parse(str.ToString());
            }
            else
            {
                return 0;
            }
        }
        else
        {
            return 0;
        }
    }


    public static int NVL_NUM_NT_NEW(object str)
    {
        if ((str != System.DBNull.Value) && (str != null))
        {
            if (str.Equals("") == false)
            {
                return int.Parse(str.ToString());
            }
            else
            {
                return 0;
            }
        }
        else
        {
            return 0;
        }
    }
}